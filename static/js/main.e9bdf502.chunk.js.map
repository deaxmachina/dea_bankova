{"version":3,"sources":["Components/About/data/aboutText.js","Reusable/glow.js","Components/About/AboutTextBox.js","Components/About/AboutPhotoDecoration.js","Components/About/AboutCVTitle.js","Components/About/data/cvHistory.js","Components/About/AboutCVTimeline.js","Reusable/HomeLink/HomeLink.js","Components/Footer/Footer.js","Components/About/About.js","Reusable/scrollToTop.js","data/projectsMetadata.js","Components/PortfolioFull/PortfolioFullProjects.js","data/visualisationsMetadata.js","Components/PortfolioFull/PortfolioFullIndividualViz.js","Components/PortfolioFull/PortfolioFull.js","Components/PortfolioPage/PortfolioPage.js","Components/HeroPage/HeaderViz.js","Components/HeroPage/HeroText.js","Components/HeroPage/HeroMenu.js","Components/HeroPage/HeroPage.js","Components/PortfolioShowcase/PortfolioShowcasePanelLeft.js","Components/PortfolioShowcase/PortfolioShowcasePanelRight.js","Components/PortfolioShowcase/PortfolioShowcaseTitle.js","Components/PortfolioShowcase/PortfolioShowcaseSeeMore.js","Components/PortfolioShowcase/PortfolioShowcase.js","Components/ContactPage/ContactTitle.js","Components/ContactPage/ContactBox.js","Components/ContactPage/ContactSocial.js","Components/ContactPage/ContactDecoration.js","Components/ContactPage/Contact.js","Reusable/Arrow/Arrow.js","Components/FrontPage/FrontPage.js","Components/Writing/Writing/WritingTopText.js","Components/Writing/Writing/WritingsContainer.js","Components/Writing/Writing/BlogPreview.js","Components/Writing/data/blogData.js","Components/Writing/Writing/Writing.js","Components/Writing/Posts/PostTemplate/PostTemplate.js","Components/Writing/Posts/1-ReactD3/Summary/Sumarry.js","Components/Writing/Posts/1-ReactD3/Section1/Section1.js","Components/Writing/Posts/1-ReactD3/BarChartDemo/BarChartDemo.js","Components/Writing/Posts/1-ReactD3/BarChartDemo/TextBarChartDemo.js","Components/Writing/Posts/1-ReactD3/Resusable/CodeBlockLight.js","Components/Writing/Posts/1-ReactD3/BarChartDemo/CodeBarChartDemo.js","Components/Writing/Posts/1-ReactD3/BarChartUseEffectDemo/BarChartUseEffectDemo.js","Components/Writing/Posts/1-ReactD3/BarChartUseEffectDemo/TextBarChartUseEffectDemo.js","Components/Writing/Posts/1-ReactD3/BarChartUseEffectDemo/CodeBarChartUseEffectDemo.js","Components/Writing/Posts/1-ReactD3/BarChartTooltip/BarChartTooltip.js","Components/Writing/Posts/1-ReactD3/BarChartTooltip/TextBarChartTooltip.js","Components/Writing/Posts/1-ReactD3/BarChartTooltip/CodeBarChartTooltip.js","Components/Writing/Posts/1-ReactD3/ForceDemo/ForceDemo.js","Components/Writing/Posts/1-ReactD3/ForceDemo/TextForceDemo.js","Components/Writing/Posts/1-ReactD3/ForceDemo/CodeForceDemo.js","Components/Writing/Posts/1-ReactD3/BrushDemo/BrushDemo.js","Components/Writing/Posts/1-ReactD3/BrushDemo/TextBrushDemo.js","Components/Writing/Posts/1-ReactD3/BrushDemo/CodeBrushDemo.js","Components/Writing/Posts/1-ReactD3/Section2/Section2.js","Components/Writing/Posts/1-ReactD3/TableOfContent/TableOfContent.js","Components/Writing/Posts/1-ReactD3/1-ReactD3.js","Components/Writing/Posts/2-SVGShapes/Introduction/Introduction.js","Components/Writing/Posts/2-SVGShapes/Cookies/CookiesViz.js","Components/Writing/Posts/2-SVGShapes/Reusable/CodeBlockLight.js","Components/Writing/Posts/2-SVGShapes/Cookies/CookiesCode.js","Components/Writing/Posts/2-SVGShapes/Cookies/CookiesText.js","Components/Writing/Posts/2-SVGShapes/Cookies/Cookies.js","Components/Writing/Posts/2-SVGShapes/Cats/CatsViz.js","Components/Writing/Posts/2-SVGShapes/Cats/CatsCode.js","Components/Writing/Posts/2-SVGShapes/Cats/CatsText.js","Components/Writing/Posts/2-SVGShapes/Cats/Cats.js","Components/Writing/Posts/2-SVGShapes/Sections/Section1Start.js","Components/Writing/Posts/2-SVGShapes/Sections/Section2Start.js","Components/Writing/Posts/2-SVGShapes/Sections/Section2End.js","Components/Writing/Posts/2-SVGShapes/2-SVGShapes.js","Components/Writing/Posts/AllPosts.js","App.js","index.js"],"names":["aboutString","className","Glow","width","height","id","stdDeviation","result","in","AboutTextBox","AboutPhotoDecoration","scaleFactor","imgUrl","style","overflow","transform","mask-type","maskUnits","x","y","mask","fill-opacity","filter","fill","mixBlendMode","type","baseFrequency","numOctaves","operator","in2","mode","patternContentUnits","xlinkHref","AboutCVTitle","href","target","icon","faLinkedin","cvHistory","date","title","workplace","location","details","AboutCVTimeline","windowWidth","divRef","windowHeight","useRef","leftMargin","mediumScreen","useEffect","container","d3","current","yScale","domain","map","CVpoint","range","padding","line","selectAll","data","join","classed","points","d","infoBoxWidth","on","e","datum","lowOpacity","timelineInfo","timelineInfoExtended","timelineDates","dateLines","text","dateHorizontalOffset","ref","HomeLink","color","to","Footer","colorCustom","backgroundColorCustom","backgroundColor","faEnvelope","faTwitter","faGithub","faHome","About","withRouter","history","unlisten","listen","window","scrollTo","projectsMetadata","websiteUrl","smallImgUrl","individualPageImgUrl","individualPageSmallImgUrl","backgroundColour","responsibleFor","tools","client","description","a","PortfolioFullProjects","project","backgroundImage","visualisationsMetadata","PortfolioFullIndividualViz","PortfolioFull","PortfolioPage","borderColor","gsap","registerPlugin","ScrollTrigger","Draggable","MotionPathPlugin","darkColour","opacityLow","chartSettings","card6","HeaderViz","timeline","defaults","duration","ease","opacity","from","delay","scale","transformOrigin","TweenLite","fromTo","rotation","cx","cy","r","offset","stopColor","fillOpacity","HeroText","HeroMenu","HeroPage","PortfolioShowcasePanelLeft","PortfolioShowcasePanelRight","class","PortfolioShowcaseTitle","PortfolioShowcaseSeeMore","faChevronRight","showcaseIDs","includes","animeTimeline","japaneseEarthquakes","iwateArchive","co2Emissions","PortfolioShowcase","ContactTitle","ContactBox","ContactSocial","ContactDecoration","Contact","Arrow","linkto","faChevronUp","FrontPage","WritingTopText","WritingsContainer","props","children","BlogPreview","post","categoryColourMap","borderRightColor","category","onMouseOver","event","onMouseOut","blogData","Writing","individualPost","position","bottom","left","PostTemplate","Header","Summary","Section1","fontStyle","fontWeight","margin","BarChartDemo","useState","setData","xScale","i","colourScale","xAxisRef","call","g","attr","select","remove","bandwidth","onClick","dataLength","Math","floor","random","Array","length","getRandomData","TextBarChartDemo","CodeBlockLight","codeString","customStyle","fontSize","background","language","prism","showLineNumbers","lineProps","wordBreak","whiteSpace","wrapLines","CodeBarChartDemo","innerWidth","BarChartUseEffectDemo","gRef","transition","TextBarChartUseEffectDemo","CodeBarChartUseEffectDemo","BarChartTooltip","tooltipRef","tooltip","xPosition","indexOf","yPosition","this","TextBarChartTooltip","CodeBarChartTooltip","ForceDemo","svgRef","nodes","setNodes","_","j","min","max","maxRadius","ceil","colorScale","chroma","node","append","force","radius","TextForceDemo","CodeForceDemo","marginBottom","marginTop","dummyData","element","name","value","BrushDemo","brushExtent","bigCircleRef","circlesRef","brushRef","bigCircleG","circlesG","circlesScale","saturate","bigCircle","brush","extent","selectedElementIndex","selection","step","move","TextBrushDemo","CodeBrushDemo","Section2","TableOfContents","PostReactD3","TableOfContent","Introduction","CookiesViz","cookieColours","colour","cookiesRadius","cookies","CookiesCode","CookiesText","Cookies","catPaths","path","CatsViz","catsRadius","cats","CatsCode","CatsText","Cats","Section1Start","Section2Start","Section2End","PostSVGShapes","size","setSize","useLayoutEffect","updateSize","innerHeight","addEventListener","removeEventListener","useWindowSize","AllPosts","exact","render","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e9bdf502.chunk.js","sourcesContent":["const aboutString = \n  <section className=\"about-me-text\">\n  <p>\n    I am a currently Tokyo-based, and usually London-based, \n    developer and designer focusing on visualisation and visual storytelling through data. My goal is to create or \n    contribute to work that engages audiences with the important issues of our day; is creative and informative \n    at the same time; or is fun and delightful. \n  </p>\n  <br />\n  <p>\n    I have worked in both industry and academia, and have a background in mathematics and machine learning. While my \n    focus is on data visualisation, I can engage in the end-to-end process of working with data - \n    posing a question, extracting insight, designing the visual representation, and finally coding it all up. \n    My technical stack includes Python for data analysis, JavaScript and React for front-end, and D3.js for building custom visualisations. \n  </p>\n</section>\n\n\nexport default aboutString;","import React from 'react';\nimport \"../App.css\";\n\n\nconst Glow = () => {\n  return (\n    <svg width=\"0\" height=\"0\">\n      <defs>\n        <filter id=\"glow-generic\">\n          <feGaussianBlur stdDeviation=\"3.0\" result='colouredBlur'/>\n          <feMerge>\n            <feMergeNode in='colouredBlur' />\n            <feMergeNode in='SourceGraphic' />\n          </feMerge>\n        </filter>\n      </defs>\n    </svg>\n  )\n};\n\nexport default Glow;","import React from \"react\";\nimport aboutString from \"./data/aboutText\";\nimport Glow from \"../../Reusable/glow\";\n\n\nconst AboutTextBox = () => {\n  return (\n    <>\n      <Glow />\n      <div className=\"title-container\" id=\"about__about-title-container\">\n        <div className=\"title-text large-text highlight-dark-background\" id=\"about__about-title-text\">About</div>\n      </div>\n      <div id=\"about__about-text\" className=\"body-text-normal\" >\n        <div>{aboutString}</div>\n      </div>\n    </>\n  )\n};\n\nexport default AboutTextBox;\n","import React from \"react\";\n\nconst AboutPhotoDecoration = ({ scaleFactor, imgUrl }) => {\n  const blueColour = \"#0D8383\" \n  const purpleColour =  \"#4E1B34\" \n  const lighterPurpleColour = \"#771D43\"\n  const opacity = 0.8;\n  const blendMode = \"screen\"\n\n  return (\n    <div id=\"about__about-photo\">\n      <svg width=\"200\" height=\"200\" style={{overflow: 'visible'}}>\n        <g transform={`scale(${scaleFactor})`}>   \n          <mask id=\"mask0\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"0\" y=\"0\" width=\"394\" height=\"447\">\n            <rect x=\"342.222\" y=\"172.829\" width=\"242\" height=\"242\" transform=\"rotate(135.575 342.222 172.829)\" />\n            <rect x=\"393.061\" y=\"270.565\" width=\"242\" height=\"242\" transform=\"rotate(133.47 393.061 270.565)\" />\n          </mask>\n          <g mask=\"url(#mask0)\">\n            <rect className=\"card-light-purple\" fill-opacity={0.2} filter=\"url(#glow-about)\" x=\"253.336\" y=\"104.134\" width=\"238\" height=\"125\" transform=\"rotate(90.095 253.336 104.134)\"/>\n            <rect className=\"card-blue\" fill-opacity={opacity}  x=\"342.222\" y=\"172.829\" width=\"242\" height=\"242\" transform=\"rotate(135.575 342.222 172.829)\"/>\n            <rect className=\"card-purple\" fill-opacity={opacity} x=\"393.061\" y=\"270.565\" width=\"242\" height=\"242\" transform=\"rotate(133.47 393.061 270.565)\"/>\n            <rect y=\"71\" width=\"401\" height=\"250\" fill=\"url(#pattern0)\" style={{mixBlendMode: blendMode}}/>\n          </g>\n          <defs>\n            <filter id=\"glow-about\">\n              <feGaussianBlur stdDeviation=\"5.0\" result='colouredBlur'/>\n              <feMerge>\n                <feMergeNode in='colouredBlur' />\n                <feMergeNode in='SourceGraphic' />\n              </feMerge>\n            </filter>\n            <filter id='static-noise-about'>\n              <feTurbulence type=\"fractalNoise\" baseFrequency='10' result='noisy' numOctaves=\"1\"/>\n              <feComposite operator='in' in='noisy' in2=\"SourceGraphic\" result='monoNoise' />\n              <feBlend in='SourceGraphic' in2='monoNoise' mode='multiply' />\n            </filter>\n            <pattern id=\"pattern0\" patternContentUnits=\"objectBoundingBox\" width=\"1\" height=\"1\">\n              <use xlinkHref=\"#image0\" transform=\"translate(0 -0.101393) scale(0.000533333 0.000855467)\"/>\n            </pattern>\n          <image id=\"image0\" width=\"1875\" height=\"1406\" xlinkHref={imgUrl}/>    </defs>\n        </g>\n      </svg>\n    </div>\n  )\n};\n\nexport default AboutPhotoDecoration;","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\n\nconst AboutCVTitle = () => {\n  return (\n    <div id=\"about__cv-title\">\n      <h2 className=\"medium-text highlight-dark-background\">CV at a glance</h2>\n      <p className=\"body-text-normal highlight-dark-background\">*hover/tap over each dot for notes</p>\n      <p className=\"body-text-normal highlight-dark-background\">or visit \n        <a href=\"https://www.linkedin.com/in/dbankova/\" target=\"_blank\" >\n          <FontAwesomeIcon icon={faLinkedin} className=\"about__linkedin-icon\" />\n        </a> \n        for details\n      </p>\n    </div>\n  )\n};\n\nexport default AboutCVTitle; ","const cvHistory = [\n  {\n    id: 0,\n    date: '2020 Sep - 2021 Oct',\n    type: 'work',\n    title: 'Specially Appointed Researcher (Data Viz)',\n    workplace: 'University of Tokyo, Interfaculty Initiative in Information Studies Watanave Hidenori Lab',\n    location: 'Tokyo, Japan',\n    details: `\n      I joined the lab as part of the Daiwa program and was later on hired formally. \n      While my title is researcher, I spend the bulk of my time on practical data viz development and \n      design and some on data analysis. Archiving and storytelling through data viz (e.g. Tohoku earthquake, Covid-19 in Japan).    \n    `\n  },\n  {\n    id: 1,\n    date: '2019 Sep - 2020 Jul',\n    type: 'education',\n    title: 'Japanese Language Program',\n    workplace: 'Daiwa Anglo-Japanese Foundation & Waseda University',\n    location: 'Tokyo, Japan',\n    details: `\n      I was awarded the prestigious Daiwa scholarship for cultural activities in Japan. \n      Between 2019 and early 2021, I completed a year-long full-time Japanese language course \n      (obtaining JLPT N2 certificate) at Waseda University and started work at the University of Tokyo. \n    `\n  },\n  {\n    id: 2,\n    date: '2018 Jan - 2019 Jul',\n    type: 'work',\n    title: 'Data Scientist / Machine Learning Engineer',\n    workplace: 'DataSine',\n    location: 'London, UK',\n    details: `\n      Joining as the first direct report to the Chief Scientist of this machine learning start-up in London, \n      I was responsible for data collection and cleaning, ML model building (NLP, computer vision), and putting\n      models into production (Python + ML frameworks such as TensorFlow, Keras, spaCy).  \n    `\n  },\n  {\n    id: 3,\n    date: '2016 Oct - 2017 Dec',\n    type: 'work',\n    title: 'Data Science Consultant',\n    workplace: 'Microsoft UK',\n    location: 'London, UK',\n    details: `\n      As part of the then nascent data science team within Microsoft Services, I built custom machine learning \n      models for or worked with data from a number of enterprise clients. My work included: Azure data services, \n      computer vision, data visualisation. \n    `\n  },\n  {\n    id: 4,\n    date: '2015 Sep - 2016 Oct',\n    type: 'work',\n    title: 'Technical Account Manager',\n    workplace: 'Microsoft UK',\n    location: 'Reading, UK',\n    details: `\n      In my very first job out of university, I learnt valuable skills in managing customer relations and operating \n      within various business environments. However, I ultimately chose to spend time \n      learning to code on my own and transferred into a technical role as a data scientist.  \n    `\n  },\n  {\n    id: 5,\n    date: '2014 Oct - 2015 Sep',\n    type: 'education',\n    title: 'MSc Mathematics & Foundations of Computer Science',\n    workplace: 'University of Oxford',\n    location: 'Oxford, UK',\n    details: `\n      A truly memorable year surrounded by a diverse and wonderful group of people on the \n      MFoCS course, and challenging and interesting curriculum. For my dissertation, I worked \n      with Prof Bob Coecke in a field combining NLP, cognition, linguistics and quantum computing. \n    `\n  },\n  {\n    id: 6,\n    date: '2011 Sep - 2014 Aug',\n    type: 'education',\n    title: 'BSc Mathematics',\n    workplace: 'University College London',\n    location: 'London, UK',\n    details: `\n      My experience as an undergraduate was a busy one – I volunteered, tutored, led the UCL Maths Society, student council. \n      I specialised in pure mathematics, especially discrete maths & algebra, which attracted me to the \n      field of CS. Contrary to popular belief, I am not very good at either arithmetic or statistics unfortunately.   \n    `\n  }\n\n]\n\nexport default cvHistory;","import React, { useEffect, useState, useRef } from \"react\";\nimport \"./About.css\";\nimport * as d3 from 'd3';\nimport cvHistory from \"./data/cvHistory\";\n\nconst AboutCVTimeline = ({ windowWidth, windowHeight }) => {\n\n  const divRef= useRef();\n\n  /// constants ///\n  //const height = 1200; \n  const dimOpacity = 0.7;\n  const lineWidth = \"1px\";\n  const leftMargin = \"50%\";\n\n  /// screen sizes ///\n  const mediumScreen = 900;\n  const smallScreen = 650;\n  const tinyScreen = 420; \n\n  /// D3 Code ///\n  useEffect(() => {\n    const height = windowWidth > 600 ? 1200 : 1500; \n    const container = d3.select(divRef.current)\n\n    /////////////////////////////////////////////////\n    ///////////////// Vertical Line ////////////////\n    ///////////////////////////////////////////////\n\n    /// Scale ///\n    const yScale = d3.scalePoint()\n      .domain(cvHistory.map(CVpoint => CVpoint.date))\n      .range([0, height])\n      .padding(0.3)\n      //.padding(windowWidth > mediumScreen ? 0.5 : 0.2)\n\n    /// Line ///\n    const line = container.selectAll(\".timeline-line\")\n      .data([0])\n      .join(\"div\")\n      .classed(\"timeline-line\", true)\n        .style(\"position\", \"absolute\")\n        .style(\"left\", leftMargin)\n        .style(\"height\", `${height}px`)\n        .style(\"width\", lineWidth)\n        .style(\"opacity\", dimOpacity)\n\n    \n    /// Point on line ///\n    const points = container\n      .selectAll(\".timeline-point\")\n      .data(cvHistory)\n      .join(\"div\")\n      .classed(\"timeline-point\", true)\n        .style(\"position\", \"absolute\")\n        .style(\"left\", `calc(${leftMargin} - 6.5px)`)\n        .style(\"top\", d => `${yScale(d.date)}px`)\n        .style(\"opacity\", 1)\n\n\n    /// just for clicking and hover events ///\n    const pointsBackground = container.selectAll(\".timeline-point-bg\")\n      .data(cvHistory)\n      .join(\"div\")\n      .classed(\"timeline-point-bg\", true)\n        .style(\"position\", \"absolute\")\n        .style(\"left\", `calc(${leftMargin} - 30px)`)\n        .style(\"top\", d => `${yScale(d.date) - 30}px`)\n        .style(\"width\", '60px')\n        .style(\"height\", '60px')\n        \n        .on('mouseover', function(e, datum) {\n            const lowOpacity = 0.1;\n            timelineInfo.style('opacity', d => d == datum ? 0 : lowOpacity)\n            timelineInfoExtended\n              .style('opacity', d => d == datum ? 1 : 0)\n              .style(\"z-index\", 2)\n            timelineDates.style('opacity', d => d == datum ? 1 : lowOpacity)\n            line.style(\"opacity\", lowOpacity)\n            points.style('opacity', d => d == datum ? 1 : lowOpacity)\n            dateLines.style('opacity', d => d == datum ? 1 : lowOpacity)\n          })\n        .on('mouseout', function(e, datum) {\n            timelineInfo.style('opacity', 1)\n            timelineInfoExtended\n              .style('opacity', 0)\n              .style(\"z-index\", -1)\n            timelineDates.style('opacity', 1)\n            line.style(\"opacity\", 1)\n            points.style('opacity', 1)\n            dateLines.style('opacity', 1)\n          })\n\n\n\n    /////////////////////////////////////////////////\n    //////////////// Work Info Boxes ///////////////\n    ///////////////////////////////////////////////\n\n    // for small screen make the info box smaller \n    const infoBoxWidth =  windowWidth > 520 ? '370px' : windowWidth > 400 ? '300px' : '250px';\n    const infoBoxHeight = '130px'\n\n    /// displayed work info ///\n    const timelineInfo = container\n      .selectAll(\".timeline-info\")\n      .data(cvHistory)\n      .join(\"div\")\n      .classed(\"timeline-info\", true)\n        .style(\"position\", 'absolute')\n        .style(\"top\", d => `${yScale(d.date) -30}px`)\n        // alternate left and right if large screen, else all on the right\n        .style(\"left\", d => windowWidth > mediumScreen\n          ? d.type == 'work'? `calc(${leftMargin} + 20px)` : `calc(${leftMargin} - 20px - ${infoBoxWidth})` \n          : `calc(${leftMargin} + 20px)` \n        )\n        .style(\"width\", infoBoxWidth)\n        // align right or left depending on the side of the timeline on large screen; always alight left on medium \n        .style(\"text-align\", d => windowWidth > mediumScreen\n          ? d.type ==\"work\" ? 'left' : 'right'\n          : 'left'\n        )\n\n    timelineInfo\n      .selectAll(\".job-title\")\n      .data(d=>[d]).join(\"p\")\n      .classed(\"job-title gradient padding body-text-normal\", true)\n        .selectAll(\".title-span\").data(d => [d]).join(\"span\").classed(\"title-span highlight-dark-background\", true)\n        .text(d => d.title)\n\n    timelineInfo.selectAll(\".workplace-name\").data(d=>[d]).join(\"p\").classed(\"workplace-name highlight-dark-background\", true).text(d => d.workplace)\n    timelineInfo.selectAll(\".workplace-location\").data(d=>[d]).join(\"p\").classed(\"workplace-location highlight-dark-background\", true).text(d => d.location)\n      \n\n    /////////////////////////////////////////////////\n    ///////////////////// Dates ////////////////////\n    ///////////////////////////////////////////////\n    const dateHorizontalOffset = 50; \n\n    /// lines to the date ///\n    const dateLines = container\n      .selectAll(\".date-line\")\n      .data(cvHistory)\n      .join(\"div\")\n      .classed('date-line', true)\n        .style(\"position\", \"absolute\")\n        // for small screen give the lines 0 width i.e. remove them \n        .style(\"width\", windowWidth > smallScreen ? `${dateHorizontalOffset}px` : 0)\n        .style(\"top\", d => `${yScale(d.date) + 5}px`)\n        // if big screen alternate the lines, else put all to the left\n        .style(\"left\", d => windowWidth > mediumScreen\n        ? d.type == \"work\" \n          ? `calc(${leftMargin} - ${dateHorizontalOffset}px - 10px)` \n          : `calc(${leftMargin} + 10px)`\n        : `calc(${leftMargin} - ${dateHorizontalOffset}px - 10px)` \n        )\n        .style(\"opacity\", dimOpacity)\n        .style('height', lineWidth)\n\n    /// dates ///\n    const timelineDates = container\n      .selectAll(\".timeline-date\")\n      .data(cvHistory)\n      .join(\"p\")\n      .classed(\"timeline-date highlight-dark-background\", true)\n        .style(\"position\", \"absolute\")\n        // for small screen more them up so that the date can do above the job title\n        .style(\"top\", d => windowWidth > smallScreen ? `${yScale(d.date) - 6}px` : `${yScale(d.date) - 60}px` )\n        // alternating left-right for big screen, all on the left for medium screen and all on the right for small \n        .style(\"left\", d => windowWidth > mediumScreen\n        ? d.type == \"work\" \n          ? `calc(${leftMargin} - ${dateHorizontalOffset}px - 180px)` \n          : `calc(${leftMargin} + ${dateHorizontalOffset}px + 20px)`\n        : windowWidth > smallScreen\n          ? `calc(${leftMargin} - ${dateHorizontalOffset}px - 180px)` \n          : `calc(${leftMargin} + ${dateHorizontalOffset}px + -30px)`\n        )\n        .text(d => d.date)\n\n\n    /////////////////////////////////////////////////\n    //////// Detailed Work Info on Hover ///////////\n    ///////////////////////////////////////////////\n    const timelineInfoExtended = container\n      .selectAll(\".timeline-info-extended\")\n      .data(cvHistory)\n      .join(\"div\")\n      .classed(\"timeline-info-extended\", true)\n        .style(\"z-index\", -1)\n        .style(\"position\", 'absolute')\n        .style(\"top\", d => `${yScale(d.date)-100}px`)\n        .style(\"left\", d => windowWidth > mediumScreen\n          ? d.type == 'work'? `calc(${leftMargin} + 20px)` : `calc(${leftMargin} - 20px - ${infoBoxWidth})` \n          : `calc(${leftMargin} + 20px)`\n        )\n          .style(\"width\", infoBoxWidth)\n  \n    timelineInfoExtended.selectAll(\".job-title-extended\").data(d=>[d]).join(\"h4\").classed(\"job-title-extended\", true).text(d => d.title)\n    timelineInfoExtended.selectAll(\".job-description\").data(d=>[d]).join(\"p\").classed(\"job-description\", true).text(d => d.details)\n\n    \n  }, [windowWidth])\n\n\n  return (\n    <>\n    <div id=\"about__cv-title\" className=\"medium-text\"></div>\n    <div id=\"about__cv-container\">\n      <div ref={divRef}></div>\n    </div>\n    </>\n  )\n};\n\nexport default AboutCVTimeline;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport \"./HomeLink.css\";\n\nconst HomeLink = ({ color }) => {\n  return (\n    <Link to=\"/\" >\n      <div className=\"home-link\">\n        <p style={{color: color}}>home</p>\n      </div>\n    </Link>\n  )\n};\n\nexport default HomeLink;","import React from \"react\";\nimport \"./Footer.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEnvelope, faHome } from '@fortawesome/free-solid-svg-icons';\nimport { faTwitter, faLinkedin, faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { Link } from \"react-router-dom\";\n\n\nconst Footer = ({ colorCustom, backgroundColorCustom }) => {\n  return (\n    <div className=\"footer\" style={{ color: colorCustom, backgroundColor: backgroundColorCustom }}>\n      <div className=\"footer__container\">\n\n        <div className=\"footer__social-container\">\n          <div className=\"footer__social\">\n            <a href=\"mailto:hello@deabankova.com\" >\n              <FontAwesomeIcon icon={faEnvelope} className=\"footer__social-icon-s\" />\n            </a>\n          </div>\n          <div className=\"footer__social\">\n            <a href=\"https://twitter.com/DeaBankova\" target=\"_blank\">\n              <FontAwesomeIcon icon={faTwitter} className=\"footer__social-icon-s\" />\n            </a>\n          </div>\n          <div className=\"footer__social\">\n            <a href=\"https://www.linkedin.com/in/dbankova/\" target=\"_blank\">\n              <FontAwesomeIcon icon={faLinkedin} className=\"footer__social-icon-s\" />\n            </a>\n          </div>\n          <div className=\"footer__social\">\n            <a href=\"https://github.com/deaxmachina\" target=\"_blank\">\n              <FontAwesomeIcon icon={faGithub} className=\"footer__social-icon-s\" />\n            </a>\n          </div>\n          <div className=\"footer__social\">\n            <Link to=\"/\" > \n              <FontAwesomeIcon icon={faHome} className=\"footer__social-icon-s\" /> \n            </Link>    \n          </div>\n        </div>\n        <div className=\"footer__text\"> \n          <p id=\"footer__name\">&#169; 2021 Dea Bankova </p>\n        </div> \n\n      </div> \n    </div>\n  )\n};\n\nexport default Footer;","import React from \"react\";\nimport \"./About.css\";\nimport AboutTextBox from \"./AboutTextBox\";\nimport AboutPhotoDecoration from \"./AboutPhotoDecoration\";\nimport AboutCVTitle from \"./AboutCVTitle\";\nimport AboutCVTimeline from \"./AboutCVTimeline\";\nimport HomeLink from \"../../Reusable/HomeLink/HomeLink\";\nimport Footer from \"../Footer/Footer\";\n\n\nconst About = ({ windowWidth, windowHeight }) => {\n  return (\n    <section id=\"about__page-container\" >\n      {/*<h1 style={{position: 'fixed', top: '0'}}>{windowWidth}</h1>*/}\n      <HomeLink color=\"#ebebeb\" />  \n      <div id=\"about__about-container\">          \n        <AboutPhotoDecoration\n            scaleFactor={ \n              windowWidth > 1300 ? 1.3: windowWidth > 1100 ? 1.1 : windowWidth > 600 ? 0.95 : windowWidth > 400 ? 0.80 : 0.70\n            }\n            imgUrl=\"https://live.staticflickr.com/65535/51077543302_8c5ce50658_b.jpg\"\n        />\n        <AboutTextBox />\n      </div>\n      <AboutCVTitle />\n      <AboutCVTimeline windowWidth={windowWidth} windowHeight={windowHeight}/>\n      <Footer colorCustom=\"#423E42\" backgroundColorCustom=\"#151315\" />\n    </section>\n  )\n};\n\nexport default About;\n","import React, { useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nfunction ScrollToTop({ history }) {\n  useEffect(() => {\n    const unlisten = history.listen(() => {\n      window.scrollTo(0, 0);\n    });\n    return () => {\n      unlisten();\n    }\n  }, []);\n\n  return (null);\n}\n\nexport default withRouter(ScrollToTop);","\n\nconst projectsMetadata = [\n  {\n    id: 'anime-timeline', \n    title: \"Timeline of Anime\",\n    websiteUrl: \"https://animetimeline.netlify.app/\",\n    imgUrl: 'https://live.staticflickr.com/65535/51100639753_1f4281a9e2_o.png',\n    smallImgUrl: 'https://live.staticflickr.com/65535/51100904620_e7c1a12e14_o.png',\n    individualPageImgUrl: \"https://live.staticflickr.com/65535/51100639753_1f4281a9e2_o.png\",\n    individualPageSmallImgUrl: 'https://live.staticflickr.com/65535/51100904620_e7c1a12e14_o.png',\n    backgroundColour: \"#4E1B34\",\n    responsibleFor: 'data preparation, visualisation, website',\n    tools: 'D3.js, React, Python',\n    client: <em>personal project</em>,\n    description: \n    <>\n      <p>\n        As an avid Japanese anime fan, I started this project with the idea of expressing through visualisation \n        the evolution of anime genres over time. Was sci-fi more popular in the 90s, were the 2000s truly the \n        ‘golden age’ of anime, and if so, what genres were prevalent during that time? As is often the case, \n        the story I imagined the data would tell was different to reality. \n      </p>\n      <br />\n      <p>\n        The evolution of anime is a topic worthy of proper exploration, but I decided to leave this task to \n        another day, and instead create an exploratory anime timeline. I used data from the popular anime fansite \n        MyAnimeList, sorted the anime of each year by user rating (vertical axis) and popularity \n        (size of the shape for each anime) and coloured the shapes that make up each anime representation by their \n        genres, choosing colours which vaguely represent more or less serious/fun genres. The result is something \n        akin to an anime ‘dashboard’ that can be used as a recommendation engine, to spot your favourite series or \n        find similar ones, to explore your taste in genres, or see at a glance what was popular over the years. \n      </p>\n      <br />\n      <p>\n        Creating this project was a very enjoyable experience for me, and I decided to adapt a simpler version \n        to use when teaching the basics of D3 to a Japanese \n        audience. <a style={{color: \"#4E1B34\"}} className=\"link-project\" href=\"https://animetimelinedemo.netlify.app/\" target=\"_blank\">Here</a> is\n        the version I used for a D3 talk \n        I gave at LeWagon Tokyo; the GitHub repository is  \n        over <a style={{color: \"#4E1B34\"}} className=\"link-project\" href=\"https://github.com/deaxmachina/lewagon_demo_vanilla\" target=\"_blank\">here</a>.\n      </p>\n    </>\n        \n  },\n  {\n    id: 'japanese-earthquakes', \n    title: \"Earthquake Disasters in Japan\",\n    websiteUrl: \"https://japan-earthquakes.netlify.app/\",\n    imgUrl: \"https://live.staticflickr.com/65535/51100108341_dffc0a04d8_o.png\",\n    smallImgUrl: \"https://live.staticflickr.com/65535/51100108341_dffc0a04d8_o.png\",\n    individualPageImgUrl: \"https://live.staticflickr.com/65535/51100108341_dffc0a04d8_o.png\",\n    individualPageSmallImgUrl: \"https://live.staticflickr.com/65535/51100108341_dffc0a04d8_o.png\",\n    backgroundColour: \"#286380\",\n    responsibleFor: 'data preparation, visualisation, website',\n    tools: 'D3.js, React, GSAP, Python',\n    client: <>individual project while at <em>the University of Tokyo</em></>,\n    description:\n    <>\n      <p>\n        Between September 2020 and March 2021, I worked on a project to record the memories of survivors of \n        the 2011 Tohoku earthquake and tsunami disaster in north Japan. I wanted to find out more about the \n        history of earthquakes in Japan and set out to create this visualisation, where you can see the magnitude \n        and number of casualties over time side by side. 2011 saw the biggest earthquake in recorded Japanese history, \n        but the deadliest one (1923 Kanto) was by far smaller in intensity. This project is by no means an in-depth \n        representation of the history of these devastating natural phenomena, but simply a humble attempt to \n        understand the most basic facts around them. \n      </p>\n    </>\n  },\n  {\n    id: 'iwate-archive', \n    title: \"Tohoku Earthquake 10th Anniversary Archive\",\n    websiteUrl: \"https://311narratives.archiving.jp\",\n    imgUrl: \"https://live.staticflickr.com/65535/51100202969_ab9cbb0a93_o.png\",\n    smallImgUrl: \"https://live.staticflickr.com/65535/51100202969_ab9cbb0a93_o.png\",\n    individualPageImgUrl: \"https://live.staticflickr.com/65535/51100210929_d1f6d1a474_o.png\",\n    individualPageSmallImgUrl: \"https://live.staticflickr.com/65535/51100210929_d1f6d1a474_o.png\",\n    backgroundColour: \"#222E3A\",\n    responsibleFor: 'data analysis, NLP, visualisation, website',\n    tools: 'D3.js, React, Python (spaCy)',\n    client: <><b>client:</b> <em>Iwate Nippo岩手日報</em></>,\n    description:  \n    <>\n      <p>\n        At the start of my time at \n        the <a style={{color: \"#222E3A\"}} className=\"link-project\" href=\"https://labo.wtnv.jp/\" target=\"_blank\">Watanave Lab</a> at\n        the University of Tokyo in 2020, \n        I was invited to take part in a project with a prominent local news agency in Iwate \n        prefecture in north \n        Japan - <a style={{color: \"#222E3A\"}} className=\"link-project\" href=\"https://www.iwate-np.co.jp/\" target=\"_blank\">Iwate Nippo</a>.\n        The objective was to create an archive to\n        preserve the thoughts, memories and narratives of survivors of \n        the <a a style={{color: \"#222E3A\"}} className=\"link-project\" href=\"https://en.wikipedia.org/wiki/2011_T%C5%8Dhoku_earthquake_and_tsunami\" target=\"_blank\">2011 Tohoku earthquake and tsunami disaster</a>,\n        using the content of over 500 interviews. This included people’s \n        movements after 11th March 2011, their thoughts to their deceased loved ones, the \n        rebuilding of their homes, and their experiences over the past 10 years. \n      </p>\n      <br />\n      <p>\n        This was my first client project in data visualisation, and a rather important one. \n        It was a challenge to perform linguistic analysis (NLP) on Japanese text for the first time, \n        build a production website for the first time, and create both standard and custom visualisations \n        in D3, which was very new to me at the time, while being respectful of the content and \n        design/representation considerations. I did not want to get anything wrong. \n      </p>\n      <br />\n      <p>\n        I was humbled by the experience of working so closely with people who have lived through this \n        disaster, and by the trust placed in me, a non-Japanese non-native speaker, to work with this\n        valuable data. My talented colleague, Dr Takata Yurina created \n        a <a style={{color: \"#222E3A\"}} className=\"link-project\" href=\"https://311stories.archiving.jp/\" target=\"_blank\">map of the movements</a> of\n        people whose homes were destroyed – many of them having to move over 4 times in the past 10 years. \n        The full archive page can be viewed \n        on <a style={{color: \"#222E3A\"}} className=\"link-project\" href=\"https://www.iwate-np.co.jp/page/higashinihon2021#01-01\" target=\"_blank\">the Iwate Nippo website</a>.     \n      </p>\n\n    </>\n  },\n  {\n    id: 'co2-emissions', \n    title: \"CO2 Emissions in Cities\",\n    websiteUrl: \"https://co2cities.netlify.app/\",\n    imgUrl: \"https://live.staticflickr.com/65535/51100260017_687728e4c8_o.png\",\n    smallImgUrl: \"https://live.staticflickr.com/65535/51100260017_687728e4c8_o.png\",\n    individualPageImgUrl: \"https://live.staticflickr.com/65535/51100260017_687728e4c8_o.png\",\n    individualPageSmallImgUrl: \"https://live.staticflickr.com/65535/51100260017_687728e4c8_o.png\",\n    backgroundColour: \"#2E5659\",\n    responsibleFor: 'data preparation, visualisation, website',\n    tools: 'D3.js, React, Python',\n    client: <>for <em>2021 Climate Crisis AI Hackathon</em></>,\n    description: \n    <>\n      <p>\n        This visualisation of CO2 & other greenhouse gas emissions in cities worldwide was completed \n        over one weekend (~30 hours) in January 2021 as part of \n        the <a href=\"https://climate-crisis.devpost.com/\" style={{color: \"#2E5659\"}} className=\"link-project\" target=\"_blank\">2021 Climate Crisis AI Hackathon </a> by <a href=\"https://launchlab.ai/\" style={{color: \"#2E5659\"}} className=\"link-project\" target=\"_blank\">AI Launch Lab</a>. The \n        challenge setter \n        was <a href=\"https://www.climatereality.ca/\" style={{color: \"#2E5659\"}} className=\"link-project\" target=\"_blank\">The Climate Reality Project Canada</a>. \n      </p>\n      <br />\n      <p>\n        It can be used to view average CO2 emissions of cities worldwide at a glance, \n        as well as to dive into the data for a specific city – \n        both its emissions and trends over time. \n      </p>\n    </>\n  },\n  {\n    id: 'olympics-museum', \n    title: \"Tokyo Olympics Museum School Trip\",\n    websiteUrl: \"https://olympics.netlify.app/\",\n    imgUrl: \"https://live.staticflickr.com/65535/51100179841_0cfe4b31b2_o.png\",\n    smallImgUrl: \"https://live.staticflickr.com/65535/51100319547_51b0024bbb_o.png\",\n    individualPageImgUrl: \"https://live.staticflickr.com/65535/51100179841_0cfe4b31b2_o.png\",\n    individualPageSmallImgUrl: \"https://live.staticflickr.com/65535/51100319547_51b0024bbb_o.png\",\n    backgroundColour: \"#A62343\",\n    responsibleFor: 'data collection, visualisation, website',\n    tools: 'D3.js, React, Rough.js, Python',\n    client: <>for <em>the University of Tokyo</em></>,\n    description:  \n    <>\n      <p>\n        Between Nov 2020 and Feb 2021, I worked on a collaborative project between the Universities \n        of Tokyo and Tsukuba, coordinated by teaching bodies in Japan, with the purpose of producing \n        materials for classroom study prior to school trips to \n        the <a href=\"https://japan-olympicmuseum.jp/en/\" style={{color: \"#A62343\"}} className=\"link-project\" target=\"_blank\">Olympics Museum in Tokyo</a>.\n        The target audience was secondary school students in schools all around Japan. \n      </p>\n      <br />\n      <p>\n        The questions and accompanying visualisations serve the purpose of cues for group discussions among \n        the students before they visit the museum and aim to bring up important topics around the history \n        and goals of the Olympics and Paralympics. The current iteration is a rough draft, or a PoC to show \n        what is possible through the use of interactive visualisations. \n        The Japanese version can be found <a href=\"https://olympicsjp.netlify.app/\" style={{color: \"#A62343\"}} className=\"link-project\" target=\"_blank\">here</a>.\n      </p>\n    </>\n  },\n  {\n    id: '100days-d3', \n    title: \"100 Days of D3.js\",\n    websiteUrl: \"https://100daysd3.netlify.app/\",\n    imgUrl: \"https://live.staticflickr.com/65535/51100815013_3dd02d1252_o.png\",\n    smallImgUrl: \"https://live.staticflickr.com/65535/51100815013_3dd02d1252_o.png\",\n    individualPageImgUrl: \"https://live.staticflickr.com/65535/51100815013_3dd02d1252_o.png\",\n    individualPageSmallImgUrl: \"https://live.staticflickr.com/65535/51100815013_3dd02d1252_o.png\",\n    backgroundColour: \"#6C6874\",\n    responsibleFor: 'data preparation, visualisation',\n    tools: 'D3.js, React, Python',\n    client: <em>personal project</em>,\n    description: \n    <>\n      <p>\n        In 2020, I started my data visualisation journey into D3.js. Simultaneously, I was teaching \n        myself React, while using it in real projects. I set aside time almost every day for 100 \n        days to dedicate to my 100 Days of Code with D3 & React challenge, completing a variety of \n        charts and custom visuals. I focused on either representing data which I deem (socially) \n        important or on creating pieces which are fun and experimental. This website contains all \n        the stand-alone visualisations that I completed during that time. \n      </p>\n    </>\n  },\n]\n\n\nexport default projectsMetadata; ","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport projectsMetadata from \"../../data/projectsMetadata\";\n\n// at what point should the image swich to the smaller one? \nconst minToChangeImage = 450; \n\nconst PortfolioFullProjects = ({ windowWidth }) => {\n  return (\n    <>\n      <div className=\"title-container\" id=\"portfolio__projects-container-styles\">\n        <div className=\"title-text large-text\" id=\"portfolio__projects-text-styles\">Projects</div>\n      </div>\n      <div className=\"clarifying-message\">click on each image for details</div>\n      <div className=\"portfolio-grid\">\n        {\n          projectsMetadata.map(project => ( \n            <div \n              key={project.id} \n              className=\"portfolio-grid-entry\" \n              style={{backgroundImage: windowWidth > minToChangeImage? `url(${project.smallImgUrl})` : `url(${project.imgUrl})`}}\n              >\n              <button className=\"portfolio-grid-btn full-project noSelect\">\n                <span className=\"portfolio-grid-project-title body-text-large\">{project.title}</span>\n                <br/>                \n                <Link to={`/portfolio/${project.id}`} >\n                  <span className=\"border-button full-project-btn noSelect\">about</span> \n                </Link>              \n              </button>\n            </div>\n          ))\n        }\n      </div>\n    </>\n  )\n};\n\nexport default PortfolioFullProjects;","const visualisationsMetadata = [\n  {\n    id: 'sakura-kyoto', \n    title: \"Cherry Blossom Bloom Times in Kyoto\",\n    websiteUrl: \"https://deaxmachina.github.io/sakura_bloom_times/\",\n    imgUrl: 'https://live.staticflickr.com/65535/51102462279_101779f316_o.png',\n    smallImgUrl: 'https://live.staticflickr.com/65535/51102629263_70096ca930_o.png',\n    individualPageImgUrl: \"https://live.staticflickr.com/65535/51102462279_101779f316_o.png\",\n    individualPageSmallImgUrl: 'https://live.staticflickr.com/65535/51102629263_70096ca930_o.png',\n    backgroundColour: \"#e27396\",\n    responsibleFor: 'data preparation, visualisation, website',\n    tools: 'D3.js, Python',\n    description: \"\"\n  },\n  {\n    id: 'words-lifetime', \n    title: \"Words we say in a lifetime - scrollytelling\",\n    websiteUrl: \"https://lifetimeofwords.netlify.app/\",\n    imgUrl: 'https://live.staticflickr.com/65535/51182741664_87330e57a0_o.jpg',\n    smallImgUrl: 'https://live.staticflickr.com/65535/51182741664_87330e57a0_o.jpg',\n    individualPageImgUrl: \"https://live.staticflickr.com/65535/51183053540_9ed8338364_o.png\",\n    individualPageSmallImgUrl: 'https://live.staticflickr.com/65535/51183053540_9ed8338364_o.png',\n    backgroundColour: \"#805880\",\n    responsibleFor: 'data preparation, visualisation, website',\n    tools: 'D3.js, GSAP, Python',\n    description: \"\"\n  }\n]\nexport default visualisationsMetadata; \n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport visualisationsMetadata from \"../../data/visualisationsMetadata\";\n\n// at what point should the image swich to the smaller one? \nconst minToChangeImage = 450; \n\n\nconst PortfolioFullIndividualViz = ({ windowWidth }) => {\n  return (\n    <>\n    <div className=\"title-container\" id=\"portfolio__standalone-container-styles\">\n      <div className=\"title-text large-text\" id=\"portfolio__standalone-text-styles\">Standalone visualisations</div>\n    </div>\n\n    <div className=\"portfolio-grid\">\n        {\n          visualisationsMetadata.map(project => (          \n            <div \n              key={project.id} \n              className=\"portfolio-grid-entry\" \n              style={{backgroundImage: windowWidth > minToChangeImage? `url(${project.smallImgUrl})` : `url(${project.imgUrl})`}}\n            >\n              <button className=\"portfolio-grid-btn individual-viz noSelect\">\n                <span className=\"portfolio-grid-project-title body-text-large\">{project.title}</span>\n                <br/>\n                <a href={project.websiteUrl} target=\"_blank\" className=\"noSelect\">\n                  <span className=\"border-button individual-viz-btn noSelect\">view</span>\n                </a>\n              </button>   \n            </div>\n          ))\n        }\n      </div>\n    </>\n  )\n};\n\nexport default PortfolioFullIndividualViz;\n","import React from \"react\";\nimport \"./PortfolioFull.css\";\nimport Glow from \"../../Reusable/glow\";\nimport PortfolioFullProjects from \"./PortfolioFullProjects\";\nimport PortfolioFullIndividualViz from \"./PortfolioFullIndividualViz\";\nimport HomeLink from \"../../Reusable/HomeLink/HomeLink\";\nimport Footer from \"../Footer/Footer\";\n\nconst PortfolioFull = ({ windowWidth }) => {\n  return (\n    <div id=\"portfolio-container-background\">\n      <section id=\"portfolio-container\">\n        <Glow />\n        <HomeLink />\n        <PortfolioFullProjects windowWidth={windowWidth}/>\n        <PortfolioFullIndividualViz windowWidth={windowWidth} />\n      </section>\n      <Footer colorCustom=\"#EBEBEB\" backgroundColorCustom=\"#CCCCCC\" />\n    </div>\n\n  )\n};\n\nexport default PortfolioFull;","import React from \"react\";\nimport \"./PortfolioPage.css\";\n\n// at what point should the image swich to the smaller one? \nconst minToChangeImage = 650; \n\n//project.description.split ('\\n').map ((item, i) => <><p key={i}>{item}</p><br /></>)\n\nconst PortfolioPage = ({ project, windowWidth }) => {\n  return (\n    <>\n    <div className=\"portfolio-page__wrapper\">\n      <div className=\"portfolio-page__image-background\" style={{backgroundColor: project.backgroundColour}}></div>\n      <div className=\"portfolio-page__image\" style={{backgroundImage: windowWidth > minToChangeImage? `url(${project.individualPageImgUrl})` : `url(${project.individualPageSmallImgUrl})`}}></div>\n      <div className=\"portfolio-page__text body-text-normal\">\n        <div className=\"portfolio-page__title-text large-text\"><span>{project.title}</span></div>\n        <div className=\"portfolio-page__view-btn-container noSelect\">\n          <a href={project.websiteUrl} target=\"_blank\" className=\"portfolio-page__view-btn body-text-normal noSelect\" style={{backgroundColor: project.backgroundColour, borderColor: project.backgroundColour}}>view</a>\n        </div>\n\n        <p className=\"portfolio-page__responsible-for-container\">\n          <span className=\"portfolio-page__bold-text\">Responsible for: </span>\n          <span>{project.responsibleFor}</span>\n        </p>\n        <p className=\"portfolio-page__tools-container\">\n          <span className=\"portfolio-page__bold-text\">Tools: </span>\n          <span>{project.tools}</span>  \n        </p>\n        <p className=\"portfolio-page__client-container\">\n          <span>{project.client}</span>\n        </p>\n        <br />\n        <p className=\"portfolio-page__project-description-container\">\n          {project.description}\n        </p>\n\n      </div>\n    </div>\n    </>\n  )\n};\n\nexport default PortfolioPage;","import React, { useEffect, useRef } from \"react\"; \nimport { gsap, ScrollTrigger, Draggable, MotionPathPlugin, TweenLite } from \"gsap/all\";\n\ngsap.registerPlugin(ScrollTrigger, Draggable, MotionPathPlugin);\n\n/// constants ///\nconst blueColour = \"#0D8383\" //\"#0D8383\" \"#0D7583\" \"#286380\"\nconst purpleColour =  \"#4E1B34\" // \"#4E1B34\" \"#423158\"\nconst lightColour = \"#ebebeb\"\nconst lighterPurpleColour = \"#771D43\"//\"#771D43\" #4C4976\"\nconst darkColour = \"#0C070E\"; \n\nconst opacityLow = 0.5;\nconst opacityHigh = 0.5\n\nconst chartSettings = {\n  \"width\": 678,\n  \"height\": 633,\n}\n\n// paths \nconst cardPath1 = \"M257.73 91.822L542.176 144.318L585.141 453.52L320.013 633.352L79.4997 521L22.4999 211.5L257.73 91.822Z\";\nconst cardPath2 = \"M186.179 148.197L438.725 40.1062L677.481 284.274L591.002 527.287L339.274 579.77L78.0649 404.64L186.179 148.197Z\";\nconst cardPath3 = \"M285.308 192.756L493 257.231L450.826 456.756L193 440.201L285.308 192.756Z\";\nconst cardPath4 = \"M531.539 192.411L623.087 395.298L438.961 503.591L275.889 296.366L531.539 192.411Z\";\nconst cardPath5 = \"M279.277 453.039L213.451 288.121L402.972 135.38L537.285 284.5L279.277 453.039Z\";\nconst card6 = {\n  width: \"412.224\",\n  height: \"337.291\", \n  transform: \"matrix(0.388631 -0.921394 0.926701 0.375798 127.2 419.359)\"\n}\nconst cardPath7 = \"M291.143 109.384L533.855 345.363L391.488 500.329L197.034 535.918L52.7508 319.903L291.143 109.384Z\";\n\n\n\nconst HeaderViz = ({ scaleFactor }) => {\n\n  useEffect(() => {\n\n    //////////////////////////////////////\n    /////////// Animations //////////////\n    //////////////////////////////////////\n    const duration = 2.5;\n\n    const timeline = gsap.timeline({\n      defaults: {\n        duration: duration,\n        ease: \"Back.easeInOut.config(2)\",\n        opacity: 0\n      }\n    });\n    timeline.from(\".card\", { delay: 0.1, scale: 0.2, transformOrigin: \"center\" }, \"=.2\")\n\n    // for the little diamond\n    TweenLite.fromTo(\".diamond\", duration, { rotation: -60, opacity: 0}, {rotation: 45, ease: \"Elastic.easeOut.config(5, 0.2)\", opacity: 1 });\n\n    },[])\n\n\n  return (\n    <>\n    <div id=\"header-viz-container\">\n      <svg width={chartSettings.width*scaleFactor} height={chartSettings.height*scaleFactor}>\n\n        <defs>\n          <radialGradient id=\"radial-gradient\" cx=\"45%\" cy=\"50%\" r=\"50%\">\n            <stop offset=\"0%\" stopColor={lighterPurpleColour} />\n            <stop offset=\"80%\" stopColor={darkColour} />\n            <stop offset=\"100%\" stopColor={darkColour} />\n          </radialGradient>\n          <filter id=\"glow\">\n            <feGaussianBlur stdDeviation=\"4.0\" result='colouredBlur'/>\n            <feMerge>\n              <feMergeNode in='colouredBlur' />\n              <feMergeNode in='SourceGraphic' />\n            </feMerge>\n          </filter>\n          <filter id='static-noise'>\n            <feTurbulence type=\"fractalNoise\" baseFrequency='10' result='noisy' numOctaves=\"1\"/>\n            <feComposite operator='in' in='noisy' in2=\"SourceGraphic\" result='monoNoise' />\n            <feBlend in='SourceGraphic' in2='monoNoise' mode='multiply' />\n          </filter>\n        </defs>\n\n        <g transform={`scale(${scaleFactor})`} >  \n          <path className=\"card\" fill={darkColour} fill=\"url(#radial-gradient)\" fillOpacity={0.6} d={cardPath1} />\n          <path className=\"card card-purple\" fillOpacity={0.5} d={cardPath2} />\n          <path className=\"card card-blue\" fillOpacity={opacityLow} filter=\"url(#static-noise)\" d={cardPath3}/>\n          <path className=\"card card-blue\" fillOpacity={0.8} filter=\"url(#static-noise)\" d={cardPath4} />\n          <path className=\"card card-blue\" fillOpacity={opacityLow} filter=\"url(#static-noise)\" d={cardPath5} />\n          <rect className=\"card card-blue\" fillOpacity={opacityLow} width={card6.width} height={card6.height} transform={card6.transform}/>\n          <path className=\"card card-blue\" fillOpacity={opacityLow} d={cardPath7} />\n          <rect className=\"diamond card-light\" filter=\"url(#glow)\" x=\"365.37\" y=\"227.629\" width=\"106\" height=\"105.55\" transform=\"rotate(43.4472 365.37 227.629)\"/>\n        </g>\n        \n      </svg>\n    </div>\n    </>\n  )\n};\n\nexport default HeaderViz; ","import React from \"react\";\n\nconst HeroText = () => {\n  return (\n    <div id=\"hero-text-container\" >\n      <p className=\"greeting highlight-dark-background\">Hi, I'm</p>\n      <h1 className=\"name highlight-dark-background\">Dea Bankova</h1>\n      <p className=\"personal-description highlight-dark-background\">\n      I create visualisations to tell stories with data.  \n        Currently Project Researcher in data visualisation \n        at the University of Tokyo & independent\n\n      </p>\n    </div>\n  )\n};\n\nexport default HeroText; ","import React from \"react\";\n//import { Link } from \"react-router-dom\";\nimport { HashLink as Link } from 'react-router-hash-link';\n\n\nconst HeroMenu = () => {\n  return (\n    <>\n      <div id=\"hero-menu-container\">\n        <Link to=\"portfolio\"><div className=\"menu-item\">portfolio</div></Link>\n        <Link to=\"/about\"><div className=\"menu-item\">about</div></Link>\n        <Link to=\"/writing\"><div className=\"menu-item\">writing</div></Link>\n        <Link to=\"#contact-page\"><div className=\"menu-item\">contact</div></Link>\n      </div >\n      \n      <div className=\"menu-underline\"></div>\n\n      <svg width=\"0\" height=\"0\">\n        <filter id='static-noise-hero'>\n          <feTurbulence type=\"fractalNoise\" baseFrequency='3' result='noisy' numOctaves=\"100\"/>\n          <feComposite operator='in' in='noisy' in2=\"SourceGraphic\" result='monoNoise' />\n          <feBlend in='SourceGraphic' in2='monoNoise' mode='multiply' />\n        </filter>\n      </svg>\n\n    </>\n  )\n};\n\nexport default HeroMenu; ","import React, { useEffect } from \"react\";\nimport \"./HeroPage.css\";\nimport HeaderViz from \"./HeaderViz\";\nimport HeroText from \"./HeroText\";\nimport HeroMenu from \"./HeroMenu\";\n\n\nconst HeroPage = ({ windowWidth, windowHeight }) => {\n  return (\n    <section id=\"hero-section\">\n      <HeroMenu />\n      <HeroText />\n      <HeaderViz \n          scaleFactor={ \n            windowWidth > 1500 ? 1: windowWidth > 1000 ? 0.9 : windowWidth > 650 ? 0.75 : windowWidth > 400 ? 0.50 : 0.45\n          }\n        />\n    </section>\n  )\n};\n\nexport default HeroPage; ","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// at what point should the image swich to the smaller one? \nconst minToChangeImage = 650; \n\nconst PortfolioShowcasePanelLeft = ({ project, windowWidth }) => {\n  return (\n    <div className=\"panel-left__wrapper\">\n      <div className=\"panel-left__image-background\" style={{backgroundColor: project.backgroundColour}}></div>\n      <div className=\"panel-left__image\" style={{backgroundImage: windowWidth > minToChangeImage? `url(${project.imgUrl})` : `url(${project.smallImgUrl})`}}></div>\n      <div className=\"panel-left__text body-text-normal\">\n        <h2 className=\"panel-left__title-text medium-text\"><span>{project.title}</span></h2>\n        <p className=\"panel__responsible-for-container\">\n          <span className=\"panel__bold-text\">Responsible for: </span>\n          <span>{project.responsibleFor}</span>\n        </p>\n        <p className=\"panel__tools-container\">\n          <span className=\"panel__bold-text\">Tools: </span>\n          <span>{project.tools}</span>  \n        </p>\n        <p className=\"panel__client-container\">\n          <span>{project.client}</span>\n        </p>\n\n        <button className=\"view-btn body-text-normal noSelect\" style={{backgroundColor: project.backgroundColour, borderColor: project.backgroundColour}}>\n          <a href={project.websiteUrl} target=\"_blank\">view</a>\n        </button>\n        <Link to={`/portfolio/${project.id}`} >\n          <button style={{borderColor: project.backgroundColour, color: project.backgroundColour}} className=\"about-btn body-text-normal\">about</button>\n        </Link>\n      </div>\n    </div>\n  )\n};\n\nexport default PortfolioShowcasePanelLeft","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// at what point should the image swich to the smaller one? \nconst minToChangeImage = 650; \n// underline-gradient underline-padding\n\nconst PortfolioShowcasePanelRight = ({ project, windowWidth }) => {\n  return (\n    <div className=\"panel-right__wrapper\">\n\n      <div className=\"panel-right__text body-text-normal\">\n        <h2 class=\"panel-right__title-text medium-text\"><span>{project.title}</span></h2>\n        <p className=\"panel__responsible-for-container\">\n          <span className=\"panel__bold-text\">Responsible for: </span>\n          <span>{project.responsibleFor}</span>\n        </p>\n        <p className=\"panel__tools-container\">\n          <span className=\"panel__bold-text\">Tools: </span>\n          <span>{project.tools}</span>  \n        </p>\n        <p className=\"panel__client-container\">\n          <span>{project.client}</span>\n        </p>\n        <button className=\"view-btn body-text-normal noSelect\" style={{backgroundColor: project.backgroundColour, borderColor: project.backgroundColour}}>\n          <a href={project.websiteUrl} target=\"_blank\">view</a>\n        </button>\n        <Link to={`/portfolio/${project.id}`} >\n          <button style={{borderColor: project.backgroundColour, color: project.backgroundColour}} className=\"about-btn body-text-normal\">about</button>\n        </Link>\n      </div>\n\n      <div className=\"panel-right__image-background\" style={{backgroundColor: project.backgroundColour}}></div>\n      <div className=\"panel-right__image\" style={{backgroundImage: windowWidth > minToChangeImage? `url(${project.imgUrl})` : `url(${project.smallImgUrl})`}}></div>\n    </div>\n  )\n};\n\nexport default PortfolioShowcasePanelRight;","import React from \"react\";\nimport Glow from \"../../Reusable/glow\";\n\nconst PortfolioShowcaseTitle = () => {\n  return (\n    <>\n      <Glow />\n      <div className=\"title-container\" id=\"showcase-container-styles\">\n        <div className=\"title-text large-text highlight-dark-background\" id=\"showcase-text-styles\">Selected Projects</div>\n      </div>\n    </>\n  )\n};\n\nexport default PortfolioShowcaseTitle;","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronRight } from '@fortawesome/free-solid-svg-icons'\nimport { Link } from \"react-router-dom\";\n\nconst PortfolioShowcaseSeeMore = () => {\n  return (\n    <Link to={`portfolio`} className=\"medium-text noSelect\">\n      <div id=\"portfolio-showcase__seemore\" className=\"medium-text noSelect\">\n        <span className=\"medium-text\">More Projects</span>\n        <FontAwesomeIcon icon={faChevronRight} id=\"portfolio-showcase__seemore-arrow\" className=\"medium-text\"/>\n      </div>\n    </Link>\n  )\n};\n\nexport default PortfolioShowcaseSeeMore;","import React from 'react';\nimport PortfolioShowcasePanelLeft from \"./PortfolioShowcasePanelLeft\";\nimport PortfolioShowcasePanelRight from \"./PortfolioShowcasePanelRight\";\nimport PortfolioShowcaseTitle from \"./PortfolioShowcaseTitle\";\nimport PortfolioShowcaseSeeMoreSeeMore from \"./PortfolioShowcaseSeeMore\";\nimport projectsMetadata from \"../../data/projectsMetadata\";\nimport \"./PortfolioShowcase.css\";\n\n// get the subset of projects in the showcase \nconst showcaseIDs = ['anime-timeline', 'japanese-earthquakes', 'iwate-archive', 'co2-emissions', 'olympics-museum']\nconst projectsMetadataShowcase = projectsMetadata.filter(project => showcaseIDs.includes(project.id))\nconst [animeTimeline] = projectsMetadata.filter(project => project.id == 'anime-timeline')\nconst [japaneseEarthquakes] = projectsMetadata.filter(project => project.id == 'japanese-earthquakes')\nconst [iwateArchive] = projectsMetadata.filter(project => project.id == 'iwate-archive')\nconst [co2Emissions] = projectsMetadata.filter(project => project.id == 'co2-emissions')\nconst [olympicsMuseum] = projectsMetadata.filter(project => project.id == 'olympics-museum')\n\n\n\nconst PortfolioShowcase = ({ windowWidth, windowHeight }) => {\n  return (\n    <section id=\"portfolio-showcase-section\">\n      <PortfolioShowcaseTitle />\n      <PortfolioShowcasePanelLeft \n        project={animeTimeline}\n        windowWidth={windowWidth}\n      />\n      <PortfolioShowcasePanelRight \n        project={japaneseEarthquakes}\n        windowWidth={windowWidth}\n      />\n      <PortfolioShowcasePanelLeft \n        project={iwateArchive}\n        windowWidth={windowWidth}\n      />\n      <PortfolioShowcasePanelRight \n        project={co2Emissions}\n        windowWidth={windowWidth}\n      />\n      {/* \n      <PortfolioShowcasePanelLeft \n        project={olympicsMuseum}\n        windowWidth={windowWidth}\n      />\n      */}\n      <PortfolioShowcaseSeeMoreSeeMore />\n    </section>\n  )\n};\n\nexport default PortfolioShowcase;","import React from \"react\";\n\nconst ContactTitle = () => {\n  return (\n    <>\n      <div id=\"contact__contact-container\" >\n        <div id=\"contact__contact-text\" className=\"large-text highlight-blue-background\">Contact</div>\n      </div>\n      <svg width='0' height='0'>\n        <defs>\n          <filter id='static-noise-contact'>\n            <feTurbulence type=\"fractalNoise\" baseFrequency='3' result='noisy' numOctaves=\"10\"/>\n            <feComposite operator='in' in='noisy' in2=\"SourceGraphic\" result='monoNoise' />\n            <feBlend in='SourceGraphic' in2='monoNoise' mode='multiply' />\n          </filter>\n        </defs>\n      </svg>\n    </>\n  )\n};\n\nexport default ContactTitle;","import React from \"react\";\n\n\nconst ContactBox = () => {\n  return (\n    <>\n      <div id=\"contact__contact-box\">\n        <div id=\"contact__contact-content\">\n          <div id=\"contact__text-title\" className=\"body-text-large\">Interested in working together?</div>\n          <div className=\"body-text-normal\">\n            <a href=\"mailto:hello@deabankova.com\" id=\"contact__contact-email\">Drop me an email</a> at \n            hello@deabankova.com or find me on social media. If you have any comments, suggestions or feedback, \n            I'm always happy to chat.\n          </div>\n        </div>\n      </div>\n    </>\n  )\n};\n\nexport default ContactBox;","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter, faLinkedin,faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nconst ContactSocial = () => {\n  return (\n    <>\n      <div id=\"contact__social-container\">\n        <div id=\"contact__social-container-box\">\n          <a href=\"https://twitter.com/DeaBankova\" target=\"_blank\">\n            <FontAwesomeIcon icon={faTwitter} className=\"contact__social-icon-s\" id=\"contact__social-twitter-s\" />\n          </a>\n          <a href=\"https://www.linkedin.com/in/dbankova/\" target=\"_blank\">\n            <FontAwesomeIcon icon={faLinkedin} className=\"contact__social-icon-s\" id=\"contact__social-linkedin-s\" />\n          </a>\n         <a href=\"https://github.com/deaxmachina\" target=\"_blank\">\n          <FontAwesomeIcon icon={faGithub} className=\"contact__social-icon-s\" id=\"contact__social-github-s\" />\n         </a>\n        </div>\n      </div>\n    </>\n  )\n};\n\nexport default ContactSocial;","import React from \"react\";\n\n\nconst ContactDecoration = ({ id }) => {\n  const blueColour = \"#0D8383\" \n  const purpleColour =  \"#4E1B34\" \n  const lightColour = \"#ebebeb\"\n  const opacity = 0.5;\n\n  return (\n    <>\n    <svg width=\"447\" height=\"394\" id={id}>\n      <filter id=\"glow-contact\">\n        <feGaussianBlur stdDeviation=\"5.0\" result='colouredBlur'/>\n        <feMerge>\n          <feMergeNode in='colouredBlur' />\n          <feMergeNode in='SourceGraphic' />\n        </feMerge>\n      </filter>\n\n      <rect x=\"104\" y=\"140\" width=\"238\" height=\"125\" fill={lightColour} filter=\"url(#glow-contact)\" fill-opacity={opacity} />\n      <rect className=\"card-purple\" x=\"172.547\" y=\"51\" width=\"242\" height=\"242\" transform=\"rotate(45.48 172.547 51)\" fill-opacity={opacity}/>\n      <rect className=\"card-blue\" x=\"270.2\" width=\"242\" height=\"242\" transform=\"rotate(43.3754 270.2 0)\" fill-opacity={opacity}/>\n    </svg>\n    </>\n  )\n};\n\nexport default ContactDecoration;","import React from \"react\";\nimport \"./Contact.css\";\nimport ContactTitle from \"./ContactTitle\";\nimport ContactBox from \"./ContactBox\";\nimport ContactSocial from \"./ContactSocial\";\nimport ContactDecoration from \"./ContactDecoration\";\n\n\nconst Contact = () => {\n  return (\n    <section id=\"contact-page\">\n      <ContactTitle />\n      <ContactBox />\n      <ContactSocial />\n      <ContactDecoration id=\"contact__decoration-l\"/>\n      {/*<ContactDecoration id=\"contact__decoration-r\"/>*/}\n    </section>\n  )\n};\n\nexport default Contact;","import React, { useEffect } from \"react\";\nimport \"./Arrow.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronUp } from '@fortawesome/free-solid-svg-icons';\nimport { Link } from \"react-router-dom\";\n//import { HashLink as Link } from 'react-router-hash-link';\n\nconst Arrow = ({ linkto }) => {\n\n  return (\n    <>\n      <Link to={linkto} > \n        <FontAwesomeIcon icon={faChevronUp} className=\"arrow-up\" /> \n      </Link>   \n    </>\n  )\n};\n\nexport default Arrow;","import React from \"react\";\nimport HeroPage from \"../HeroPage/HeroPage\";\nimport PortfolioShowcase from \"../PortfolioShowcase/PortfolioShowcase\";\nimport Contact from \"../ContactPage/Contact\";\nimport Footer from \"../Footer/Footer\";\nimport Arrow from \"../../Reusable/Arrow/Arrow\";\n\n\nconst FrontPage = ({ windowWidth, windowHeight }) => {\n  return (\n    <>\n      {/*<h1 style={{position: 'fixed', top: '0'}}>{windowWidth}</h1>*/}\n      <HeroPage windowWidth={windowWidth} windowHeight={windowHeight}/>\n      <PortfolioShowcase windowWidth={windowWidth} windowHeight={windowHeight}/>\n      <Contact />\n      <Footer colorCustom=\"#423E42\" backgroundColorCustom=\"#151315\" />\n      <Arrow linkto=\"/\"/>\n    </>\n  )  \n};\n\nexport default FrontPage;","import React from \"react\";\n\n// title and various text at the top of the page\nconst WritingTopText = () => {\n  return (\n    <>\n      <div className=\"title-container\" id=\"writing__title-container\">\n        <div className=\"title-text large-text highlight-dark-background\" id=\"writing__title-text\">Writing</div>\n      </div>\n      <div className=\"body-text-normal writing__explanation\" >\n        I plan to write occasionally: <span>tutorials</span>, <span>data visualisation</span>, <span>other (musings, research, etc.)</span>\n      </div>\n    </>\n  )\n};\n\nexport default WritingTopText;","import React from \"react\";\n\n// this is where all the post previews go \nconst WritingsContainer = (props) => {\n  return (\n    <div id=\"writing__post-preview-container\">{props.children}</div>\n  )\n};\n\nexport default WritingsContainer;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\n// individual blog preview \nconst BlogPreview = ({ post }) => {\n  // map the possible blog categories to colours which you use for \n  // the right border of the content box and the highlighting of the title\n  const categoryColourMap = {\n    'tutorial': '#4E1B34',\n    'dataviz': '#1B3A4B',\n    'other': '#48444b'\n  }\n  return (\n    <div className=\"blog-preview-container\">\n\n      {/* note: this link used to be a div with these styles but wrapping the div in the link \n      breaks the styles; maybe there is a better way of doing this? \n      */}\n      <Link to={`/writing/${post.id}`} \n      className=\"blog-preview-img\" \n      style={{backgroundImage: `url(${post.imgUrl})`}}\n      ></Link>\n\n      <div className=\"blog-preview-content\" style={{borderRightColor: categoryColourMap[post.category]}}>\n        <Link to={`/writing/${post.id}`} >\n          <h2 className=\"blog-preview-title medium-text\" \n            onMouseOver={ event => {\n              const el = event.target\n              el.style.backgroundColor = categoryColourMap[post.category]\n            }}\n            onMouseOut={ event => {\n              const el = event.target;\n              el.style.backgroundColor = 'inherit'\n            }}>\n            {post.title}\n          </h2>\n        </Link>\n        <p className=\"blog-preview-date\">{post.date}</p>\n        <p className=\"blog-preview-summary\">{post.description}</p>\n        <Link to={`/writing/${post.id}`} >\n          <button className=\"blog-preview-btn\" style={{backgroundColor: categoryColourMap[post.category]}}>read more</button>\n        </Link>\n      </div>\n    </div>\n  )\n};\n\nexport default BlogPreview;","// data for the preview of the blogposts (not the actual content of them)\n\n\nconst blogData = [\n  {\n    id: 'd3-react-start', \n    title: \"Getting started with D3.js in React\",\n    date: 'Apr 2021',\n    category: 'tutorial',\n    imgUrl: 'https://live.staticflickr.com/65535/51140128795_068dcfc6f2_o.png',\n    smallImgUrl: 'https://live.staticflickr.com/65535/51124368892_d5eff0b322_o.png',\n    description: \n     <>\n      I recently completed a 100 Days of Code challenge with React and D3 and I wanted to share my thoughts \n      on the two main approaches for combining these frameworks, both of which are designed to control the \n      DOM in their own way. We will compare these approaches and go in depth into a couple of examples \n      --bar chart, tooltips, d3-force and d3-brush--, focusing specifically on the option I have tended to\n      prefer, which uses the useEffect and useRef React hooks to hand over DOM access to D3.\n     </>\n  },\n  {\n    id: 'svg-shapes', \n    title: \"SVG Shapes in Visualisations\",\n    date: 'May 2021',\n    category: 'dataviz',\n    imgUrl: 'https://live.staticflickr.com/65535/51188912351_787637b9e0_o.png',\n    smallImgUrl: 'https://live.staticflickr.com/65535/51188912351_787637b9e0_o.png',\n    description: \n     <>\n      Using more complex SVG shapes as markers in your visualisations can be surprisingly simple. Whether \n      that’s adding shapes that correspond to your data (flowers, emoji, planets… the possibilities are endless) \n      or using abstract shapes to make your viz more interesting. In this tutorial, we go over a straightforward \n      way to add SVGs from websites such as flaticon or Font Awesome to your D3 viz. You can extend the same approach \n      to work with shapes you create in Figma, Adobe Illustrator, or anything you like. \n     </>\n  },\n];\n\nexport default blogData;\n","import React from \"react\";\nimport \"./Writing.css\";\nimport HomeLink from \"../../../Reusable/HomeLink/HomeLink\";\nimport WritingTopText from \"./WritingTopText\";\nimport WritingsContainer from \"./WritingsContainer\";\nimport BlogPreview from \"./BlogPreview\";\nimport Footer from \"../../Footer/Footer\";\nimport blogData from \"../data/blogData\";\n\n\nconst Writing = ({ windowWidth, windowHeight }) => {\n  return (\n    <>\n    <section id=\"writing__page-container\" >\n      {/*<h1 style={{position: 'fixed', top: '0'}}>{windowWidth}</h1>*/}\n      <HomeLink color=\"#ebebeb\" />  \n      <div id=\"writing__content-container\">          \n        <WritingTopText />\n        <WritingsContainer>\n          {\n            blogData.map(individualPost => (\n              <BlogPreview post={individualPost}/>\n            ))\n          }\n        </WritingsContainer>\n      </div>\n      {/* this div that wraps the footer is just temp while there is only one post, so that \n      the footer can be pushed to the bottom of the page; height of the page is also set to min 100vh;\n      remove this style when more posts appear\n       */}\n      <div style={{position: 'absolute', bottom: 0, left: 0, width: '100%'}}>\n        <Footer colorCustom=\"#423E42\" backgroundColorCustom=\"#151315\" />\n      </div>\n      \n    </section>\n    </>\n\n  )\n};\n\nexport default Writing;","import React from \"react\";\nimport \"./PostTemplate.css\";\n\n// This is just an example to serve as a reminder of the avilable classes and intended structure of the posts\nconst PostTemplateExample = () => {\n  return (\n    <div className=\"post-template__wrapper\">\n      <div className=\"post-template__container\">\n        <div className=\"post-template__title-text large-text\">This is a tempalate</div>\n        <p className=\"post-template__date\">Apr 2021</p>\n        <div className=\"post-template__single-col-wrapper\">\n          <p className=\"post-template__single-col-para\">\n            Here is where a simple summary will go. It shouldn't be too long. \n          </p>\n        </div>\n\n        <div className=\"post-template__table-of-contents\">\n          <div className=\"post-template__title-container\">\n            <div className=\"post-template__section-title-text highlight-dark-background\">Table of Contents</div>\n          </div>\n          <ul className=\"post-template__table-of-contents-main-list\">\n            <li><a href=\"/\" className=\"post__toc-link\">First section title</a></li>\n            <li><a href=\"/\" className=\"post__toc-link\">Second section title</a></li>\n            <ul>\n              <li><a href=\"/\">Second section subtitle</a></li>\n              <li><a href=\"/\">Longer sutitle for the second section</a></li>\n            </ul>\n            <li><a href=\"/\" className=\"post__toc-link\">Third section title</a></li>\n            <li><a href=\"/\" className=\"post__toc-link\">Fourth section title</a></li>\n          </ul>\n        </div>\n\n        <div className=\"post-template__single-col-wrapper\">\n          <div className=\"post-template__title-container\">\n            <div className=\"post-template__section-title-text highlight-dark-background\">Some section title</div>\n          </div>\n          <h3 className=\"post-template__section-subtitle\">Subsection title</h3>\n          <p className=\"post-template__single-col-para\">\n            After the summary, there is two types of text chunks that we could have. \n            This is one of them - a single column, e,g. where we don't have code alongside. \n            This should probably be the same as the summary, so that the text looks unified. \n\n            We could have <span className=\"post__highlighted-text\">text that you want to emphaise</span>. \n            And also some <a href=\"google.com\" target=\"_blank\" className=\"post__link\">links to stuff</a>.\n            Or if you want to emphaise something but not highlight it <span className=\"post__emph-text\">use this style</span>\n          </p>\n        </div>\n\n        <div className=\"post-template__two-col-wrapper\">\n          <div className=\"post-template__title-container\">\n            <div className=\"post-template__section-title-text highlight-dark-background\">Wide Section</div>\n          </div>\n          <div className=\"post-template__two-col-container\">\n            <div className=\"post-template__two-col-left\">Some stuff on the left</div>\n            <div className=\"post-template__two-col-right\">And some stuff on the right</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\n\n\nconst PostTemplate = ({ id, children }) => {\n  return (\n    <div className=\"post-template__wrapper\">\n      <div className=\"post-template__container\">\n        <div id={id}>\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default PostTemplate;","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <>\n      <div className=\"post-template__title-text large-text\">Getting started with D3.js in React</div>\n      <p className=\"post-template__date\">Apr 2021</p>\n    </>\n  )\n}\n\nconst Summary = () => {\n  return (\n    <>\n      <div className=\"post-template__single-col-wrapper\">\n        <p className=\"post-template__single-col-para\">\n            I recently completed a 100 Days of Code challenge with React and D3 (\n            <a className=\"post__link\" href=\"https://github.com/deaxmachina/100daysD3\" target=\"_blank\">code</a> / <a className=\"post__link\" href=\"https://100daysd3.netlify.app/\" target=\"_blank\">website</a> \n            ), and I wanted to <span className=\"post__emph-text\">share my thoughts on the two main approaches for combining these frameworks</span>.\n            I will go in depth into a couple of examples, focusing specifically on the approach which I have tended to prefer, which uses the useEffect \n            and useRef React hooks to access the DOM. \n            <br />\n            <br />\n            This post assumes some basic knowledge of both D3 and React, but is not geared towards experts. If you \n            are new to D3, I highly recommend Curran Kelleher’s <a className=\"post__link\" href=\"https://curran.github.io/dataviz-course-2018/\" target=\"_blank\">Dataviz 2018 course</a> or \n            Shirley Wu’s Frontend Master’s <a className=\"post__link\" href=\"https://frontendmasters.com/courses/d3/\" target=\"_blank\">Introduction to D3 course</a>\n            <br />  \n            <br />\n            I use <span className=\"post__emph-text\">React version 17 (17.0.1)</span> and <span className=\"post__emph-text\">D3 version 6 (6.6.0).</span> The React parts use functional components, \n            and the D3 ones the <a className=\"post__link\" href=\"https://observablehq.com/@d3/selection-join\" target=\"_blank\">new-ish join API</a>. \n            I also make use of two very popular libraries chroma-js (v2.1.1) and lodash (v4.17.21).\n        </p>\n      </div>\n    </>\n  )\n};\n\nexport { Header, Summary }","import React from 'react';\n\nconst Section1 = () => {\n  return (\n   <>\n    <div className=\"post-template__single-col-wrapper\">\n\n      <div id=\"overview-two-ways-combining-d3-react\">\n        <div className=\"post-template__title-container\">\n          <div className=\"post-template__section-title-text\">\n            Overview of the two ways (DOM handled by React or by D3) of combining D3 and React\n          </div>\n        </div>\n        <p className=\"post-template__single-col-para\">\n          A lot of discussions have been taking place recently about best practices on \n          using D3.js and React together, and some excellent resources already exist out there \n          [my favourites include: \n          Amelia Wattenberger’s <a className=\"post__link\" href=\"https://wattenberger.com/blog/react-and-d3\" target=\"_blank\">React + D3.js tutorial</a>, \n          Curran Kelleher’s YouTube <a className=\"post__link\" href=\"https://datavis.tech/datavis-2020/\" target=\"_blank \">DataViz 2020 series</a>,\n          The Muratorium’s YouTube <a className=\"post__link\" href=\"https://www.youtube.com/playlist?list=PLDZ4p-ENjbiPo4WH7KdHjh_EMI7Ic8b2B\" target=\"_blank\">Using React Hooks with D3</a> series],\n          which should come as no surprise \n          given the immense popularity of both frameworks. The reason why I decided to write yet another tutorial \n          is that I only started my D3 + React journey 8 months ago and still have \n          the <span className=\"post__emph-text\">fresh memory of how confusing \n          it was to navigate the different approaches for combining the two frameworks</span>. My aim with this post is to share a personal \n          perspective regarding what worked for me. \n          <br />\n          <br />\n          You have probably already heard that the main challenge of combining D3 and React is that \n          they <span className=\"post__emph-text\">both compete for control over the DOM</span>. In \n          other words, both React and D3 come with their own \"capabilities\" for manipulating \n          the DOM, with their own pros and cons, and optimisations. D3 came out just before React and other modern frameworks such as Vue, and so, granted, it was not created with their existence \n          in mind. So, what should you do? \n          <br />\n          <br />\n          The general consensus is that you should let React handle DOM manipulations and D3 everything else related to your \n          visualisation, such as scales, data munging, layout calculations etc. A common problem with this approach is that \n          it makes it somewhat challenging, or sometimes impossible to use some popular D3 capabilities such as transitions \n          and animations, axes, brushes, fine control over the behaviour of elements as they enter, update and exit, d3-force \n          layouts, etc. \n          <br />\n          <br />\n          <span>This gives you two options:</span>\n          <ul className=\"post__list-in-body\">\n            <li>\n              <span className=\"post__highlighted-text\">Option 1:</span> The ‘proper’ method. <span className=\"post__emph-text\">Use React whenever possible</span>, \n              and only if strictly unavoidable resort to using D3 to access DOM elements directly via the use of useRef. \n            </li>\n            <li>\n              <span className=\"post__highlighted-text\">Option 2:</span> The <span className=\"post__emph-text\">‘chuck everything in a useEffect’</span> method. \n              Place almost all your D3 code as you’d write it in vanilla JS into a React useEffect hook, appending to a DOM element (e.g. svg)\n              accessed via a useRef. \n            </li>\n          </ul>\n        </p>\n      </div>\n\n      <div id=\"pros-cons-either-way\">\n      <p className=\"post-template__single-col-para\">\n        <h3 className=\"post-template__section-subtitle\">Pros and Cons of each way</h3>\n        <span className=\"post__highlighted-text\">Option 1</span> \n        <span style={{fontStyle: 'italic'}}> (let React handle the DOM) </span>\n        <span style={{fontWeight: 'bold'}}> Pros &#8593;</span>\n        <ul className=\"post__list-in-body\">\n          <li>Can make use of React performance optimisations.</li>\n          <li>Generally write less & cleaner declarative code.</li>\n          <li>Generally avoid hideous bugs. </li>\n        </ul>\n        <br />\n        <span className=\"post__highlighted-text\">Option 1</span> \n        <span style={{fontStyle: 'italic'}}> (let React handle the DOM) </span>\n        <span style={{fontWeight: 'bold'}}> Cons &#8595;</span>\n        <ul className=\"post__list-in-body\">\n          <li>Sometimes you really can’t avoid using a useRef to tap into the DOM (e.g. calling a D3 brush) anyway.</li>\n          <li>Sometimes you need to implement otherwise straightforward in D3 elements (e.g. D3 axes) yourself.</li>\n          <li>Most D3 code you find online will be written in vanilla JS and you will have to completely refactor it \n          so as to work with React. If you are less experienced, this might be frustrating and time-consuming at first.</li>\n        </ul>\n        <br />\n        <br />\n        <span className=\"post__highlighted-text\">Option 2</span>\n        <span style={{fontStyle: 'italic'}}> (chuck D3 code in useEffect) </span>\n        <span style={{fontWeight: 'bold'}}> Pros &#8593;</span>\n        <ul className=\"post__list-in-body\">\n          <li>Since the code you put inside the useEffect is almost identical to vanilla JS D3 code, you can make use \n            of existing D3 code and tutorials, especially if you are still finding your way around.</li>\n          <li>You can use everything from the D3 API as is.</li>\n          <li>Less cognitive load trying to figure out what goes where.</li>\n        </ul>\n        <br />\n        <span className=\"post__highlighted-text\">Option 2</span> \n        <span style={{fontStyle: 'italic'}}> (chuck D3 code in useEffect) </span>\n        <span style={{fontWeight: 'bold'}}> Cons &#8595;</span>\n        <ul className=\"post__list-in-body\">\n          <li>Lose access to React render optimisations.</li>\n          <li>Prone to bugs.</li>\n          <li>It’s possible that it won’t spark joy for you. Declarative React is nice after all.</li>\n        </ul>\n        <br />\n        <br />\n      </p>\n      </div>\n\n      <div id=\"pros-of-both\">\n        <h3 className=\"post-template__section-subtitle\">Pros of both, or why use React with D3 in the first place</h3>\n        <p className=\"post-template__single-col-para\">\n          You might be wondering if there is any point in using React with D3, especially if you are going to go with the \n          ‘chuck everything in a useEffect’ approach. That depends (don't you love hearing that phrase!) \n          on the way that your brain works, on your project requirements, on what you are trying to learn or achieve. \n          If you have no external constraints \n          and can work with any framework of your choice, I do recommend giving React + D3 a try. <span className=\"post__emph-text\">One of the main benefits is React state</span>. Using \n          state to handle your data, and data changes, can vastly simplify your \n          process. <span className=\"post__emph-text\">React components are another big advantage.</span> They allow you to easily organise your various \n          visualisation bits into components, which you can get to talk to each other via props and exchange data \n          in state. As a novice to both frameworks, I ended up choosing the second option for my projects and \n          I think that really paid out. I now feel comfortable to start switching over to the ‘proper’ (letting React handle the DOM) method \n          whenever possible. Therefore, in this post I would like to show you how either approach works, but focus \n          on the arguably hackier one in more depth. \n        </p>        \n      </div>\n   </div>\n   </>\n  )\n};\n\nexport default Section1;","import React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\n\n// constants\nconst width=300;\nconst height=140;\nconst margin = {top: 10, right: 10, bottom: 30, left: 10}\n\nconst BarChartDemo = () => {\n  const [data, setData] = useState([30, 50, 80, 90, 20])\n    \n  // define your scales\n  const xScale = d3.scaleBand()\n    .domain(data.map((d, i) => i))\n    .range([0, width - margin.left - margin.right])\n    .padding(0.05)\n  const colourScale = d3.scaleOrdinal()\n    .domain(data.map((d, i) => i))\n    .range(['#f72585', '#b5179e', '#7209b7', '#560bad', '#480ca8', '#3f37c9','#4895ef'])\n\n  // define and call d3 axis using a ref\n  const xAxisRef = useRef();\n  useEffect(() => {\n    const xAxis = g => g\n      .attr(\"transform\", `translate(${0}, ${height-margin.bottom})`)\n      .call(d3.axisBottom(xScale))\n      .call(d => d.select(\".domain\").remove())\n    // select the ref to the axis g element and call axis in there\n    d3.select(xAxisRef.current).call(xAxis)\n  }, [data])\n\n  // function to pass to button on click to generate random data\n  const getRandomData = () => {\n    const dataLength = Math.floor(Math.random() * Math.floor(6)) + 3;\n    return Array.from({length: dataLength}, () => Math.floor(Math.random() * 100) +10);\n  }\n\n  return (\n      <div className=\"bar-chart-demo-wrapper\">\n        <svg width={width} height={height}>\n          <g transform={`translate(${margin.left},${margin.top})`}>\n            {data.map((d, i) => (\n              <rect\n                x={xScale(i)}\n                y={height - margin.bottom - d}\n                width={xScale.bandwidth()}\n                height={d}\n                fill={colourScale(i)}\n              />\n            ))}\n            <g ref={xAxisRef}></g>\n          </g>\n        </svg>\n        <button onClick={() => setData(getRandomData())} className=\"bar-chart-random-btn\"> random </button>\n      </div>\n  )\n};\n\nexport default BarChartDemo;","import React from \"react\";\n\nconst TextBarChartDemo = () => {\n  return (\n    <div>\n      <div>\n       Have a look at the complete code here <a href=\"https://codesandbox.io/s/react-bar-chart-demo-bnht8\" target=\"_blank\" className=\"post__link\">[code sandbox]</a>\n      </div>\n      <br />\n      <ul className=\"post__list-in-body\">\n        <li>\n        <span className=\"post__highlighted-text\"> Use React to render the rectangles</span> that make up the bar chart inside \n          the render function by looping over the data and rendering one element for each bar. \n        </li>\n        <li>\n          <span className=\"post__highlighted-text\"> Use state to manage the data</span>, meaning that data is stored in state initially,\n          and then on every subsequent update. See this in practice with the 'random' button. React will re-render everything depending on the data \n          each time that it changes. This includes the rects in the render function, and the axis code stored in the useEffect. \n        </li>\n        <li>\n          <span className=\"post__highlighted-text\">Store the code for the axis in a useEffect side effect.</span> Before we can do this, we create a ref with a <code className=\"code\">useRef</code> hook, which is a way to tap into the raw DOM element using React. \n          By setting <code className=\"code\">const xAxisRef = useRef()</code> and passing this ref to a g element, \n           we can then tap into this g element inside the <code className=\"code\">useEffect()</code> by invoking the <code className=\"code\">current</code> method, i.e. <code className=\"code\">xAxisRef.current</code>\n        </li>\n        <li>\n          <span className=\"post__highlighted-text\">Define scales - xScale and colourScale inside the component directly</span> if they depend on the data, and the data \n          will change or is otherwise stored in state. If your data is static and you don't need to store it in state, you can also put the code \n          for the scales or other data-dependent code outside of your component. This way, the scales computation will not run each time \n          the component loads. Note that another way to optimise code like so is to use a <code className=\"code\">useMemo</code> hook and wrap the scales code inside of it. \n          If you're interested, have a look at the documentation for <code className=\"code\">useMemo</code>.\n        </li>\n      </ul>\n    </div>\n  )\n};\n\nexport default TextBarChartDemo;","//import SyntaxHighlighter from 'react-syntax-highlighter';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nconst CodeBlockLight = ({ codeString }) => {\n  return (\n    <SyntaxHighlighter \n      customStyle={{fontSize: '14px', background: '#eee'}}\n      language=\"jsx\"\n      style={prism} \n      showLineNumbers={false} \n      lineProps={{style: {wordBreak: 'break-all', whiteSpace: 'pre-wrap'}}}\n      wrapLines={true} \n    >\n      {codeString}\n    </SyntaxHighlighter>\n  )\n};\n\nexport default CodeBlockLight;\n\n\n\n","import BarChartDemo from \"./BarChartDemo\";\nimport TextBarChartDemo from \"./TextBarChartDemo\";\nimport CodeBlockLight from \"../Resusable/CodeBlockLight\";\nimport \"./BarChartDemo.css\";\n\n\nconst CodeBarChartDemo = () => {\n  const codeString = `const BarChartDemo = () => {\n  const [data, setData] = useState([30, 50, 80, 90, 20])\n      \n  // define your scales\n  const xScale = d3.scaleBand()\n    .domain(data.map((d, i) => i))\n    .range([0, width - margin.left - margin.right])\n    .padding(0.05)\n  const colourScale = d3.scaleOrdinal()\n    .domain(data.map((d, i) => i))\n    .range([\n      '#f72585', '#b5179e', '#7209b7', \n    '#560bad', '#480ca8', '#3f37c9','#4895ef'\n  ])\n  \n  // define and call d3 axis using a ref\n  const xAxisRef = useRef();\n  useEffect(() => {\n    const xAxis = g => g\n      .attr(\"transform\", \\`translate(\\${0}, \\${height-margin.bottom})\\`)\n      .call(d3.axisBottom(xScale))\n      .call(d => d.select(\".domain\").remove())\n    // select the ref to the axis g element and call axis in there\n    d3.select(xAxisRef.current).call(xAxis)\n  }, [data])\n  \n  return (\n    <div className=\"wrapper\">\n      <svg width={width} height={height}>\n        <g transform={\\`translate(\\${margin.left},\\${margin.top})\\`}>\n          {data.map((d, i) => (\n            <rect\n              key={i}\n              x={xScale(i)}\n              y={height - margin.bottom - d}\n              width={xScale.bandwidth()}\n              height={d}\n              fill={colourScale(i)}\n            />\n          ))}\n          <g ref={xAxisRef}></g>\n        </g>\n      </svg>\n    </div>\n    )\n  };\n`\n\n  return (\n    <div className=\"post-template__two-col-container\">\n      <div className=\"post-template__two-col-left\">\n        <CodeBlockLight codeString={codeString}/>\n      </div>\n      <div className=\"post-template__two-col-right\">\n        <BarChartDemo />\n        <br />\n        <TextBarChartDemo />\n      </div>\n    </div>\n  );\n};\n\nexport default CodeBarChartDemo;\n\n\n","import React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\n\n// constants\nconst width=300;\nconst height=140;\nconst margin = {top: 10, right: 10, bottom: 30, left: 10}\nconst innerWidth = width - margin.left - margin.right;\n\nconst BarChartUseEffectDemo = () => {\n  const [data, setData] = useState([30, 50, 80, 90, 20])\n    \n  // define your scales\n  const xScale = d3.scaleBand()\n    .domain(data.map((d, i) => i))\n    .range([0, innerWidth])\n    .padding(0.05)\n  const colourScale = d3.scaleOrdinal()\n    .domain(data.map((d, i) => i))\n    .range(['#f72585', '#b5179e', '#7209b7', '#560bad', '#480ca8', '#3f37c9','#4895ef'])\n\n  // refs \n  const gRef = useRef();\n  const xAxisRef = useRef();\n\n  // D3 code\n  useEffect(() => {\n    if (!data) {return}\n\n    // select group for the bar chart \n    const g = d3.select(gRef.current)\n    // attach the bars \n    const bars = g.selectAll(\".bar\")\n      .data(data)\n      .join(\"rect\")\n      .classed(\"bar\", true)\n      .attr(\"x\", (d, i) => xScale(i))\n      .attr(\"width\", xScale.bandwidth())\n      .attr(\"y\", d => height - margin.bottom)\n      .attr(\"height\", 0)\n      .style(\"fill\", \"#fff\")\n      .transition().duration(1000)\n        .attr(\"y\", d => height - margin.bottom - d)\n        .attr(\"height\", d => d)\n        .style(\"fill\", (d, i) => colourScale(i))\n\n    // define and call axes\n    const xAxis = g => g\n      .attr(\"transform\", `translate(${0}, ${height-margin.bottom})`)\n      .call(d3.axisBottom(xScale))\n      .call(d => d.select(\".domain\").remove())\n    d3.select(xAxisRef.current).call(xAxis)\n\n  }, [data])\n\n  // function to pass to button on click to generate random data\n  const getRandomData = () => {\n    const dataLength = Math.floor(Math.random() * Math.floor(6)) + 3;\n    return Array.from({length: dataLength}, () => Math.floor(Math.random() * 100) +10);\n  }\n\n  return (\n    <div className=\"bar-chart-use-effect-wrapper\">\n      <svg width={width} height={height}>\n        <g transform={`translate(${margin.left},${margin.top})`} ref={gRef}>\n          <g ref={xAxisRef}></g>\n        </g>\n      </svg>\n      <button onClick={() => setData(getRandomData())} className=\"bar-chart-random-btn\"> random </button>\n      <br />\n    </div>\n  )\n};\n\nexport default BarChartUseEffectDemo;","import React from \"react\";\n\nconst TextBarChartUseEffectDemo = () => {\n  return (\n    <div>\n      <div>\n       Have a look at the complete code here <a href=\"https://codesandbox.io/s/react-barchart-useeffect-demo-d9w0t\" target=\"_blank\" className=\"post__link\">[code sandbox]</a>\n      </div>\n      <br />\n\n      We first note that the following bits are the same as before: \n      defining data in state, our scales definition, and creating our svg and inside group g element \n      in the render function of this React component. \n      The differences are: \n      <ul className=\"post__list-in-body\">\n        <li>\n          <span className=\"post__highlighted-text\">All of our graph code is now stored in a useEffect.</span> Its \n          array of dependencies includes <code className=\"code\">data</code>, meaning that the code inside will execute, and the component will re-render,\n          each time the data changes. In our case this happens on click of a \"random\" button (see pen for button implementation).\n        </li>\n        <li>\n        <span className=\"post__highlighted-text\">The code inside the useEffect is pure D3 code</span>, but instead of tapping into an element \n          the usual D3 JS way i.e. directly selecting a reference to the element by class or id, \n          we make use of a React reference to the raw DOM element <code className=\"code\">useRef</code>. \n          The general strategy for this is like before: \n          <ul className=\"post__list-in-body\">\n            <li>Choose element we want to select - the group element inside the svg here.</li>\n            <li>Create a ref to it and assign it to a variable, e.g. <code className=\"code\">const gRef = useRef();</code></li>\n            <li>Put that reference in the <code className=\"code\">ref</code> attribute of the element.</li>\n          </ul>\n        </li>\n        <li>\n          Note that if you decide to create a single reference, e.g. \n          to the top level group element or the entire svg and then use d3's <code className=\"code\">append</code> inside the <code className=\"code\">useEffect</code> to append to it,\n          it will work, but if you update the data, the same element will get appended over and over again, instead of being updated. \n          I either make a new ref for the group elements that I want to use, such as in this case \n          a ref for the bar chart and one for the axis, \n          or <span className=\"post__emph-text\">don't use <code className=\"code\">append</code> but instead use <code className=\"code\">selectAll-data-join</code></span> even\n          if appending a single element. \n        </li>\n        <li>\n        <span className=\"post__highlighted-text\">Note the use of transition</span> <code className=\"code\">transition().duration(1000)</code> , just as you normally would with D3. \n          If you wanted to implement the same using the approach above, you might need to use an external library such as GSAP or \n          define your own transition. In some cases, you might be able to achieve it with CSS instead. This particular example is relatively \n          straightforward but there are cases when it's not. \n        </li>\n      </ul>\n    </div>\n  )\n};\n\nexport default TextBarChartUseEffectDemo;","import CodeBlockLight from \"../Resusable/CodeBlockLight\";\nimport BarChartUseEffectDemo from \"./BarChartUseEffectDemo\";\nimport TextBarChartUseEffectDemo from \"./TextBarChartUseEffectDemo\";\nimport \"./BarChartUseEffectDemo.css\";\n\n\nconst CodeBarChartUseEffectDemo = () => {\n  const codeString = `const BarChartUseEffectDemo = () => {\n    // --- same as above --- \n    const [data, setData] = useState([30, 50, 80, 90, 20]) \n      \n    // define your scales --- omitted; same as above ---\n  \n    // refs \n    const gRef = useRef();\n    const xAxisRef = useRef();\n  \n    // D3 code\n    useEffect(() => {\n      if (!data) {return}\n\n      // select group for the bar chart \n      const g = d3.select(gRef.current)\n      // attach the bars \n      const bars = g.selectAll(\".bar\")\n        .data(data)\n        .join(\"rect\")\n        .classed(\"bar\", true)\n        .attr(\"x\", (d, i) => xScale(i))\n        .attr(\"width\", xScale.bandwidth())\n        .attr(\"y\", d => height - margin.bottom)\n        .attr(\"height\", 0)\n        .style(\"fill\", \"#fff\")\n        .transition().duration(1000)\n          .attr(\"y\", d => height - margin.bottom - d)\n          .attr(\"height\", d => d)\n          .style(\"fill\", (d, i) => colourScale(i))\n  \n      // define and call axes --- omitted; same as above ---\n  \n    }, [data])\n\n    return (\n      <div className=\"wrapper\">\n        <svg width={width} height={height}>\n          <g \n            transform={\\`translate(\\${margin.left},\\${margin.top})\\`} \n            ref={gRef}\n          >\n            <g ref={xAxisRef}></g>\n          </g>\n        </svg>\n      </div>\n    )\n  };\n`\n\n  return (\n    <div className=\"post-template__two-col-container\">\n      <div className=\"post-template__two-col-left\">\n        <CodeBlockLight codeString={codeString}/>\n      </div>\n      <div className=\"post-template__two-col-right\">\n        <BarChartUseEffectDemo />\n        <TextBarChartUseEffectDemo />\n      </div>\n    </div>\n  );\n};\n\n\n\n\nexport default CodeBarChartUseEffectDemo;","import React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\n\n// constants\nconst width=300;\nconst height=140;\nconst margin = {top: 10, right: 10, bottom: 30, left: 10}\nconst innerWidth = width - margin.left - margin.right;\n\nconst BarChartTooltip = () => {\n  const [data, setData] = useState([30, 50, 80, 90, 20])\n    \n  // define your scales\n  const xScale = d3.scaleBand()\n    .domain(data.map((d, i) => i))\n    .range([0, innerWidth])\n    .padding(0.05)\n  const colourScale = d3.scaleOrdinal()\n    .domain(data.map((d, i) => i))\n    .range(['#f72585', '#b5179e', '#7209b7', '#560bad', '#480ca8', '#3f37c9','#4895ef'])\n\n  // refs \n  const gRef = useRef();\n  const xAxisRef = useRef();\n  const tooltipRef = useRef();\n\n  // D3 code\n  useEffect(() => {\n    if (!data) {return}\n\n    // select group for the bar chart \n    const g = d3.select(gRef.current)\n    // select group for the tooltip\n    const tooltip = d3.select(tooltipRef.current)\n\n    // attach the bars \n    const bars = g.selectAll(\".bar\")\n      .data(data)\n      .join(\"rect\")\n        .classed(\"bar\", true)\n        .attr(\"x\", (d, i) => xScale(i))\n        .attr(\"width\", xScale.bandwidth())\n        .attr(\"y\", d => height - margin.bottom)\n        .attr(\"height\", 0)\n        .style(\"fill\", \"#fff\")\n        .on(\"mouseenter\", onMouseEnter)\n        .on(\"mouseleave\", onMouseLeave)\n        .transition().duration(1000)\n          .attr(\"y\", d => height - margin.bottom - d)\n          .attr(\"height\", d => d)\n          .style(\"fill\", (d, i) => colourScale(i))\n\n    // define and call axes \n    const xAxis = g => g\n      .attr(\"transform\", `translate(${0}, ${height-margin.bottom})`)\n      .call(d3.axisBottom(xScale))\n      .call(d => d.select(\".domain\").remove())\n    d3.select(xAxisRef.current).call(xAxis)\n\n    // events for the tooltip\n    function onMouseEnter(event, datum) {\n      tooltip.style(\"opacity\", 1)\n      tooltip.select(\".tooltip-info\").text(`val: ${datum}`) // insert text\n      // position the toolbar \n      const xPosition = xScale(data.indexOf(datum)) \n      const yPosition =  height - margin.bottom - datum - 30\n      tooltip\n        .style(\"left\", `calc(${xPosition}px + 5px)`)\n        .style(\"top\", `${yPosition}px`)\n      d3.select(this).style(\"fill\", \"#fca311\") // set colour to selected bar\n    };\n    function onMouseLeave(event, datum) {\n      tooltip.style(\"opacity\", 0)\n      d3.select(this).style('fill', colourScale(data.indexOf(datum)))\n    }\n\n  }, [data])\n\n  return (\n    <div className=\"bar-chart-tooltip-wrapper\">\n      <svg width={width} height={height}>\n        <g transform={`translate(${margin.left},${margin.top})`} ref={gRef}>\n          <g ref={xAxisRef}></g>\n        </g>\n      </svg>\n      <div className=\"tooltip\" ref={tooltipRef}>\n        <div className=\"tooltip-info\"></div>\n      </div>\n    </div>\n  )\n};\n\nexport default BarChartTooltip;","import React from \"react\";\nimport CodeBlockLight from \"../Resusable/CodeBlockLight\";\n\nconst codeStringFirst = `useEffect(() => {\n  tooltip.select(\".tooltip-info\")\n  .html(\n    <div><span>name: </span> \\${datum.name}</div>\n    <div><span>value: </span> \\${datum.value}</div>\n  }, [])\n)`\n\nconst codeStringSecond = `const [tooltipData, setTooltipData] = useState()\nuseEffect(() => {\n  tooltip.select(\".tooltip-info\")\n  setTooltipData(datum)\n}, [])\nrender (\n  <div>\n    <div><span>name: </span>{tooltipData.name}</div>\n    <div><span>value: </span>{tooltipData.value}</div>\n  </div>\n)`\n\nconst TextBarChartTooltip = () => {\n  return (\n    <p className=\"post-template__single-col-para\">\n        To finish off this bar chart, let's have a look \n        at <span className=\"post__emph-text\">two different ways you might go about implementing a tooltip on hover</span>. \n        This is a simple example, so it doesn't make much of a difference which way you use, but if you are constructing a more elaborate \n        tooltip with multiple lines of information and styles, constructing this with state to store your tooltip data in can simplify your process. \n        <br />\n        <br />\n        <span className=\"post__highlighted-text\">Let's have a look at the D3 way first.</span> The tooltip would need to be placed inside a <code className=\"code\">useEffect</code>. We \n        then select, say, a div element, which here has a class of <code className=\"code\">tooltip-info</code> and use its <code className=\"code\">html</code> method \n        to <span className=\"post__emph-text\">directly inject html inside the div</span>. This example is simple because we only have 2 lines \n        of html, i.e. only the name and value for each data point. \n        <CodeBlockLight codeString={codeStringFirst}/>\n        <br />\n        <span className=\"post__highlighted-text\">While with the React approach</span>, you can <span className=\"post__emph-text\">construct the html skeleton of your tooltip directly in the render method</span>, \n        and then populate it with the content of variables stored in state. We've done this here: \n        <CodeBlockLight codeString={codeStringSecond}/>\n        where we've created beforehand a <code className='code'>const [tooltipData, setTooltipData] = useState()</code> state to contain our tooltip data,\n        and all that D3 needs to do (note that you don't even have to do this with D3) is to update state so that the tooltip data gets updated. \n        It is arguably a cleaner way to do this. \n        <br />\n        <br />\n\n       I lost the full implementation of the two options that I had prepared. I'm sorry! However, you can still check out the \n      full implementation of the above bar chart with tooltip over here <a href=\"https://codesandbox.io/s/ecstatic-sea-rbb5n?file=/src/App.js\" className=\"post__link\" target=\"_blank\">[code sandbox]</a>. It \n      uses the D3 way, and can very easily be changed to use the React state way. Maybe see if you can modify it to achieve that? \n\n    </p>\n  )\n};\n\nexport default TextBarChartTooltip;","import BarChartTooltip from \"./BarChartTooltip\";\nimport TextBarChartTooltip from \"./TextBarChartTooltip\";\nimport \"./BarChartTooltip.css\";\n\n\nconst CodeBarChartTooltip = () => {\n  const codeStringFirst = `useEffect(() => {\n  // select group for the tooltip\n  const tooltip = d3.select(tooltipRef.current)\n\n  // events for the tooltip\n  function onMouseEnter(event, datum) {\n    // directly insert text into existing div using D3 \n    tooltip.select(\".tooltip-info\").text(\\`value: \\${datum}\\`) \n    };\n  }, [data])\nreturn (\n  <div className=\"wrapper\">\n    <div className=\"tooltip\" ref={tooltipRef}>\n      {/* Your svg element goes here */}\n      <div className=\"tooltip-info\"></div>\n    </div>\n  </div>\n)\n`\n\nconst codeStringSecond = `// store the data for tooltip in state \nconst [tooltipData, setTooltipData] = useState(null); \nuseEffect(() => {\n  // select group for the tooltip\n  const tooltip = d3.select(tooltipRef.current)\n\n  // events for the tooltip\n  function onMouseEnter(event, datum) {\n    // update state for tooltip data \n    setTooltipData(datum)\n  };\n}, [data])\n\nreturn (\n  <div className=\"wrapper\">\n    <div className=\"tooltip\" ref={tooltipRef}>\n      {/* Your svg element goes here */}\n      <div className=\"tooltip-info\">{tooltipData}</div>\n    </div>\n  </div>\n)`\n\n  return (\n    <div className=\"post-template__single-col-wrapper\">\n    <BarChartTooltip />\n    <TextBarChartTooltip />\n    </div>\n  );\n};\n\nexport default CodeBarChartTooltip;","import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\nimport * as chroma from \"chroma-js\";\n\n// helper function to get int between min and max\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); \n}\n\n\nconst ForceDemo = () => {\n\n  /// refs ///\n  const svgRef = useRef();\n  const gRef = useRef();\n\n  /// data ///\n  const [nodes, setNodes] = useState(null);\n\n  // dimensions \n  const width = 320;\n  const height = 320;\n  const minRadius = 5;\n  const maxRadius = 10;\n  const n = 200; // initial number of circles \n\n  // helper function - get random data\n  const getRandomData = () => {\n    const nodes = Array.from({length: _.random(30, 200)}, (j, i) => ({\n      id: Math.random(),\n      r: getRandomInt(minRadius, maxRadius+1),\n      color: \"maroon\"\n    }));\n    setNodes([...nodes])\n  }\n\n  // data load \n  useEffect(() => {\n    setNodes(getRandomData)\n  }, []);\n\n  // colour scale \n  const colorScale = chroma.scale(['#f72585', '#4895ef']).domain([minRadius, maxRadius]) \n\n  /// D3 Code ///\n  useEffect(() => {\n    if (!nodes) { return }\n\n    const g = d3.select(gRef.current).attr(\"transform\", `translate(${width/2}, ${height/2})`)\n\n    // add a circle surrouding the whole force graph \n    const circle = g.append(\"circle\")\n        .attr(\"r\", width/2)\n        .attr(\"fill\", \"#eee\")\n\n    // add all the cirlces as nodes \n    const node = g  \n      .selectAll(\".circle\")\n      .data(nodes, d => d)\n      .join(\"circle\")\n      .classed(\"circle\", true)\n        .attr(\"r\", d => d.r) \n        .attr(\"fill\", d => colorScale(d.r))\n        .attr(\"stroke\", d => colorScale(d.r))\n        .attr(\"stroke-opacity\", 0.35)\n        .attr(\"stroke-width\", 3)\n\n    // add the force simulation\n    function tick() { node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y); }\n    const simulation = d3.forceSimulation(nodes)\n      .on(\"tick\", tick)\n      .force(\"collide\", d3.forceCollide().radius(d => d.r + 1))\n      .force('radial', d3.forceRadial(1))\n\n  }, [nodes]);\n\n  return (\n    <div className=\"force-demo-wrapper\"> \n\n      <svg ref={svgRef} width={width} height={height}>\n        <g ref={gRef}></g>\n      </svg>\n      <button onClick={getRandomData} className=\"force-demo-random-btn\">random</button>\n    <br />\n      \n    </div>\n  )\n};\n\nexport default ForceDemo;","import React from \"react\";\n\nconst TextForceDemo = () => {\n  return (\n    <div>\n      <div>\n       Have a look at the complete code here <a href=\"https://codesandbox.io/s/react-d3force-demo-wqhci\" target=\"_blank\" className=\"post__link\">[code sandbox]</a>.\n       <br />\n       Below I assume that you know what a d3-force graph is and how to implement one, but if that's not the case, here is one of the resources \n       I used when I was first learning about these: <a href=\"https://observablehq.com/@d3/force-directed-graph\" target=\"_blank\" className=\"post__link\">Observable notebook</a> by\n       Mike Bostock. Note that you can also search for 'force' in Observable and you will get many wonderful resources. This of course applies to any other graph type. \n      </div>\n      <br />\n      <ul className=\"post__list-in-body\">\n        <li>\n          <span className=\"post__highlighted-text\">Store the graph nodes</span> as you would for any other data in a React  \n          state <code className=\"code\">const [nodes, setNodes] = useState(null);</code>\n        </li>\n        <li>\n          <span className=\"post__highlighted-text\">Get D3 and React to talk to each other</span> via useRef and useEffect. \n          Define a reference to the group element containing your D3 graph like\n          so <code className=\"code\">const gRef = useRef();</code> and don't forget to include the ref as an attr of the element \n          itself <code className=\"code\">&lt;g ref=&#123;gRef&#125;&gt;&lt;/g&gt;</code> and then select the group element \n          inside <code className=\"code\">useEffect</code> like so <code className=\"code\">const g = d3.select(gRef.current)</code>\n        </li>\n        <li>\n          <span className=\"post__highlighted-text\">Write all D3 code to define your d3-force graph inside the useEffect</span> and \n           make sure to include all the data, i.e. in this case the nodes, in the array of dependencies \n          of the <code className=\"code\">useEffect</code> at the end. This will make sure the code is ran and the DOM updated \n          each time the data changes, such as with the use of the random button in here. \n        </li>\n      </ul>\n    </div>\n  )\n};\n\nexport default TextForceDemo;","//import SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atelierDuneLight, hopscotch } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { coldarkDark as dark, prism, xonokai } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport \"./ForceDemo.css\";\n\nimport ForceDemo from \"./ForceDemo\";\nimport TextForceDemo from \"./TextForceDemo\";\n\n\nconst CodeForceDemo = () => {\n  const codeString = `const ForceDemo = () => {\n    const gRef = useRef();\n  \n    const [nodes, setNodes] = useState(null);\n  \n    // helper function - get random data\n    const getRandomData = () => {\n      const nodes = Array.from({length: _.random(30, 200)}, \n      (j, i) => ({\n        id: Math.random(),\n        r: getRandomInt(minRadius, maxRadius+1),\n        color: \"maroon\"\n      }));\n      setNodes([...nodes])\n    }\n  \n    // data load \n    useEffect(() => {\n      setNodes(getRandomData)\n    }, []);\n  \n    // colour scale \n    const colorScale = chroma.scale(['#f72585', '#4895ef'])\n      .domain([minRadius, maxRadius]) \n  \n    /// D3 Code ///\n    useEffect(() => {\n      if (!nodes) { return }\n  \n      const g = d3.select(gRef.current)\n      // add a circle surrouding the whole force graph \n      const circle = g.append(\"circle\")\n          .attr(\"r\", 150)\n          .attr(\"fill\", \"#eee\")\n  \n      // add all the cirlces as nodes \n      const node = g  \n        .selectAll(\".circle\")\n        .data(nodes, d => d)\n        .join(\"circle\")\n        .classed(\"circle\", true)\n          .attr(\"r\", d => d.r) \n          .attr(\"fill\", d => colorScale(d.r))\n          .attr(\"stroke\", d => colorScale(d.r))\n          .attr(\"stroke-opacity\", 0.35)\n          .attr(\"stroke-width\", 3)\n  \n      // add the force simulation\n      function tick() { \n        node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y); \n      }\n      const simulation = d3.forceSimulation(nodes)\n        .on(\"tick\", tick)\n        .force(\"collide\", d3.forceCollide().radius(d => d.r + 1))\n        .force('radial', d3.forceRadial(1))\n  \n    }, [nodes]);\n  \n    return (\n      <div className=\"wrapper\"> \n        <svg width={width} height={height}>\n          <g ref={gRef}></g>\n        </svg>\n      </div>\n    )\n  };`\n\n  return (\n    <div>\n\n      <div className=\"post-template__two-col-container\" style={{marginBottom: \"10px\"}}>\n        <div className=\"post-template__two-col-left\">\n          <ForceDemo />\n        </div>\n        <div className=\"post-template__two-col-right\" style={{marginTop: \"30px\"}}>\n            I wanted to give a simple example using <a href=\"https://github.com/d3/d3-force\" target=\"_blank\" className=\"post__link\">d3-force</a> with React, \n            as it is something I don't often see mentioned in tutorials, but a part of D3 that I love to (over)use. \n            Unlike D3 transitions, animations and axes, d3-force \n            is one of those integral parts of D3 that I have not seen implemented in pure React in a straightforward way\n            thusfar. However, you can find libraries such as <a href=\"https://github.com/uber/react-vis-force\" target=\"_blank\" className=\"post__link\">this one</a> by Uber which \n            would allow you in certain cases to construct a d3-force graph using the declarative React way via the use of a ready-made graph component. \n            Let's have a look at <span className=\"post__emph-text\">a simple way to port a d3-force graph inside a React component</span>. \n            The flow is actually the same as with the bar chart,\n            which means that once you get the hang of this method, you can port any existing code into React this way.\n        </div>\n      </div>\n\n    <div className=\"post-template__two-col-container\">\n      <div className=\"post-template__two-col-left\">\n        <SyntaxHighlighter \n          customStyle={{fontSize: '14px', background: '#eee', height: '500px'}}\n          language=\"jsx\"\n          style={prism} \n          showLineNumbers={false} \n          wrapLines={true}\n          lineProps={{style: {wordBreak: 'break-all', whiteSpace: 'pre-wrap'}}}\n        >\n          {codeString}\n        </SyntaxHighlighter>\n      </div>\n      <div className=\"post-template__two-col-right\">\n        <TextForceDemo />\n      </div>\n    </div>\n    </div>\n\n\n  );\n};\n\n\n\nexport default CodeForceDemo;","import React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\nimport chroma from \"chroma-js\";\n\n// constants\nconst width=300;\nconst height=200;\n\nconst numberData = 10;\nconst dummyData = _.range(numberData).map(element => `circle${element}`).map(function (x, i) { \n  return { name: x, value: _.range(numberData).map(element => 3*i + 1)[i] }\n});\n\nconst BrushDemo = () => {\n  const [data, setData] = useState(dummyData) // data\n  const [brushExtent, setBrushExtent] = useState(0);\n\n  // refs \n  const bigCircleRef = useRef();\n  const circlesRef = useRef();\n  const brushRef = useRef();\n\n  // D3 code\n  useEffect(() => {\n    if (!data) {return}\n\n    // select groups\n    const bigCircleG = d3.select(bigCircleRef.current)\n    const circlesG = d3.select(circlesRef.current)\n\n    // Scales \n    const circlesScale = d3.scaleBand()\n      .domain(data.map(d => d.name))\n      .range([10, width-10])\n      .padding(0.2)\n    const colorScale = chroma.scale(['#f72585', '#4895ef']\n      .map(color => chroma(color).saturate(1)))\n      .domain([1, 30]) \n\n    /// Circles graph ///\n    const circlesGraphBackground = circlesG\n      .selectAll(\".background-rect\")\n      .data([0])\n      .join(\"rect\")\n      .classed(\"background-rect\", true)\n        .attr(\"width\", width)\n        .attr(\"y\", 100)\n        .attr(\"height\", 100)\n        .attr(\"fill\", \"#eee\")\n    const circlesGraph = circlesG\n      .selectAll(\".circle\")\n      .data(data)\n      .join(\"circle\")\n        .classed(\"circle\", true)\n        .attr(\"r\", d => d.value)\n        .attr(\"cx\", d => circlesScale(d.name))\n        .attr(\"cy\", 150)\n        .style(\"fill\", d => colorScale(d.value))\n        .style(\"stroke\", d => colorScale(d.value))\n        .style(\"stroke-width\", 3)\n        .style(\"fill-opacity\", 0.8)\n\n    /// Big Circle graph //\n    const bigCircle = bigCircleG\n      .selectAll(\".big-circle\")\n      .data([0])\n      .join(\"circle\")\n      .classed(\"big-circle\", true)\n        .attr(\"r\", 40)\n        .attr(\"cx\", width/2)\n        .attr(\"cy\", 50)\n        .style(\"fill\", d => colorScale(data[brushExtent].value))\n        .style(\"stroke\", d => colorScale(data[brushExtent].value))\n        .style(\"stroke-width\", 3)\n        .style(\"fill-opacity\", 0.8)\n    \n      /// Brush ///\n      const defaultExtent = [[0, 100], [30, 200]]\n      const brush = d3.brush()\n        .extent([[0, 100], [width, 200]])\n        .on('brush end', (event) => {\n        const selectedElementIndex = Math.floor((event.selection[0][0] / circlesScale.step()));\n        bigCircle\n          .style(\"fill\", d => colorScale(data[selectedElementIndex].value))\n          .style(\"stroke\", d => colorScale(data[selectedElementIndex].value))\n        });\n\n      d3.select(brushRef.current)\n        .call(brush)\n        .call(brush.move, defaultExtent)\n      \n  }, [data])\n\n\n  return (\n    <>\n      <div className=\"brush-demo-wrapper\">\n        <svg width={width} height={height}>\n          <g>\n            <g ref={bigCircleRef}></g>\n            <g ref={circlesRef}></g>\n            <g ref={brushRef}></g>\n          </g>\n        </svg>\n      </div>\n\n    </>\n  )\n};\n\nexport default BrushDemo;","import React from \"react\";\n\nconst TextBrushDemo = () => {\n  return (\n    <div>\n    <ul className=\"post__list-in-body\">\n      <li>\n        <span className=\"post__highlighted-text\">Create one orchestrating component</span> <code className=\"code\">BrushDemo</code>, \n        which is responsible for managing data and state and \n        passing these into the respective props of components. \n      </li>\n      <li>\n      <span className=\"post__highlighted-text\">Create one component for the circle which we want to display bigger on top upon brushing</span> <code className=\"code\">DisplayComponent</code>. \n        Create one component, <code className=\"code\">BrushableComponent</code> for the graph that can be brushed. \n        Note that we put the brush code itself in this component as well, but if you want to make your code even more \n        modular and neat, you can isolate the brush into its own component as well. (Refer to the link to the full code pen above to see what I'm talking about here.)\n      </li>\n      <li>\n        We use state <code className=\"code\">const [selectedIndex, setSelectedIndex] = useState(0)</code> to <span className=\"post__highlighted-text\">keep track of which element has been brushed</span> in\n        the <code className=\"code\">BrushableComponent</code>, so that we can pass this information to <code className=\"code\">DisplayComponent</code> which\n        can in turn update the selected circle. \n        For <code className=\"code\">BrushableComponent</code>, we pass the setter <code className=\"code\">setSelectedIndex</code> as a prop because we want to pass \n        the index of the selected circle in this component through the use of d3-brush. \n        For <code className=\"code\">DisplayComponent</code>, we pass the actual value <code className=\"code\">selectedIndex</code> as a prop, so as to display the \n        correctly selected circle after the brush has been triggered (ended). \n      </li>\n      <li>We also <span className=\"post__highlighted-text\">pass other props to both components as needed,</span> for example in this case, colour scales.</li>\n    </ul>\n    </div>\n  )\n};\n\nexport default TextBrushDemo;","//import SyntaxHighlighter from 'react-syntax-highlighter';\nimport CodeBlockLight from \"../Resusable/CodeBlockLight\";\nimport BrushDemo from \"./BrushDemo\";\nimport TextBrushDemo from \"./TextBrushDemo\";\nimport \"./BrushDemo.css\";\n\n\nconst CodeBrushDemo = () => {\n  const codeStringFirst = `const BrushableComponent = ({ \n    data, circlesScale, colorScale, setSelectedIndex \n  }) => {\n  \n    const circlesRef = useRef();\n    const brushRef = useRef();\n  \n    useEffect(() => {\n      const circlesG = d3.select(circlesRef.current)\n  \n      /// Circles graph ///\n      const circlesGraphBackground = circlesG\n        .selectAll(\".background-rect\")\n        .data([0])\n        .join(\"rect\")\n        .classed(\"background-rect\", true)\n          .attr(\"width\", width)\n          .attr(\"y\", 100)\n          .attr(\"height\", 100)\n          .attr(\"fill\", \"#eee\")\n  \n      const circlesGraph = circlesG\n        .selectAll(\".circle\")\n        .data(data)\n        .join(\"circle\")\n          .classed(\"circle\", true)\n          .attr(\"r\", d => d.value)\n          .attr(\"cx\", d => circlesScale(d.name))\n          .attr(\"cy\", 150)\n          .style(\"fill\", d => colorScale(d.value))\n          .style(\"stroke\", d => colorScale(d.value))\n          .style(\"stroke-width\", 3)\n          .style(\"fill-opacity\", 0.8)\n  \n      /// Brush ///\n        const defaultExtent = [[0, 100], [30, 200]]\n        const brush = d3.brush()\n          .extent([[0, 100], [width, 200]])\n          .on('brush end', (event) => {\n          const selectedElementIndex = Math.floor((\n            event.selection[0][0] / circlesScale.step()\n            ));\n          setSelectedIndex(selectedElementIndex)\n        });\n        d3.select(brushRef.current)\n          .call(brush)\n          .call(brush.move, defaultExtent)\n    }, [])\n  \n    return (\n      <>\n        <g ref={circlesRef}></g>\n        <g ref={brushRef}></g>\n      </>\n    )\n  }\n`\n\nconst codeStringSecond = `const DisplayComponent = ({ \n  data, colorScale, selectedIndex \n}) => {\n\n  const bigCircleRef = useRef();\n\n  useEffect(() => {\n    const bigCircleG = d3.select(bigCircleRef.current)\n\n    /// Big Circle graph //\n    const bigCircle = bigCircleG\n      .selectAll(\".big-circle\")\n      .data([0])\n      .join(\"circle\")\n      .classed(\"big-circle\", true)\n        .attr(\"r\", 40)\n        .attr(\"cx\", width/2)\n        .attr(\"cy\", 50)\n        .style(\"fill\", d => colorScale(data[selectedIndex].value))\n        .style(\"stroke\", d => colorScale(data[selectedIndex].value))\n        .style(\"stroke-width\", 3)\n        .style(\"fill-opacity\", 0.8)\n  }, [data, selectedIndex])\n\n  return (\n    <g ref={bigCircleRef}></g>\n  )\n}\n`\n\nconst codeStringThird = `const BrushDemo = () => {\n  const [data, setData] = useState(dummyData) \n  const [selectedIndex, setSelectedIndex] = useState(0); \n\n  if (!data) {return}\n\n  // Scales \n  const circlesScale = d3.scaleBand()\n    .domain(data.map(d => d.name))\n    .range([10, width-10])\n    .padding(0.2)\n  const colorScale = chroma.scale(['#f72585', '#4895ef']\n    .map(color => chroma(color).saturate(0)))\n    .domain([1, 30]) \n\n  return (\n    <>\n      <div className=\"wrapper\">\n        <svg width={width} height={height}>\n          <g>\n            <DisplayComponent \n              data={data} \n              colorScale={colorScale} \n              selectedIndex={selectedIndex}\n            />\n            <BrushableComponent \n              data={data} \n              circlesScale={circlesScale} \n              colorScale={colorScale} \n              setSelectedIndex={setSelectedIndex}\n            />\n          </g>\n        </svg>\n      </div>\n\n    </>\n  )\n};`\n\n  return (\n    <div>\n\n      <div className=\"post-template__single-col-wrapper\">\n        <p className=\"post-template__single-col-para\">\n        Similar to the d3-force example above, <a className=\"post__link\" href=\"https://github.com/d3/d3-brush\" target=\"_blank\">d3-brush</a> is one of those parts of the D3 API which \n        you <span className=\"post__emph-text\">can't just put as is in the React render method</span>. However, it is perfectly possible to write code for the rest of your \n        visualisation the React way, and then only make a reference for the brush inside a group element, which \n        you then access in the <code className=\"code\">useEffect</code> through <code className=\"code\">useRef</code>. \n        Below, we consider an example written entirely in the useEffect way. See if you can refactor the same to work with only a single ref to the group element necessary for the brush. \n        This time since we have two separate visual elements, tied together via the brush, it's a good opportunity to consider how we can <span className=\"post__emph-text\">make use of React components</span> to\n        modularize the code. Below, we will just consider the strategy for doing this. \n        <br />\n        For the full implementation, have a look here <a className=\"post__link\" href=\"https://codesandbox.io/s/brush-components-demo-97e3s\" target=\"_blank\">[code sandbox]</a>. If you'd like \n        to compare this with a version that doesn't use components, head here <a className=\"post__link\" href=\"https://codesandbox.io/s/brush-demo-77ivi\" target=\"_blank\">[code sandbox]</a>\n        </p>\n       </div>\n\n    <div className=\"post-template__two-col-container\">\n      <div className=\"post-template__two-col-left\">\n        <CodeBlockLight codeString={codeStringThird}/>\n      </div>\n      <div className=\"post-template__two-col-right\">\n        <BrushDemo />\n        <br></br>\n        <br></br>\n        <TextBrushDemo />\n      </div>\n    </div>\n\n\n\n    </div>\n\n  );\n};\n\nexport default CodeBrushDemo;","import React from 'react';\nimport CodeBarChartDemo from \"../BarChartDemo/CodeBarChartDemo\";\nimport CodeBarChartUseEffectDemo from \"../BarChartUseEffectDemo/CodeBarChartUseEffectDemo\";\nimport CodeBarChartTooltip from \"../BarChartTooltip/CodeBarChartTooltip\";\nimport CodeForceDemo from \"../ForceDemo/CodeForceDemo\";\nimport CodeBrushDemo from \"../BrushDemo/CodeBrushDemo\";\n\n\nconst Section2 = () => {\n  return (\n    <>\n      <div className=\"post-template__single-col-wrapper\">\n        <div id=\"react-d3-code-walkthroughs\" className=\"post-template__title-container\" >\n          <div className=\"post-template__section-title-text\">Code Walkthroughs</div>\n        </div>\n      </div>\n\n      <div className=\"post-template__two-col-wrapper\">\n\n        <h3 id=\"simple-barchart-both\" className=\"post-template__section-subtitle\">Simple bar chart in both ways - React for DOM control option</h3>\n        <br />\n        <CodeBarChartDemo />\n\n        <h3 className=\"post-template__section-subtitle\">Simple bar chart in both ways - D3 for DOM control option</h3>\n        <CodeBarChartUseEffectDemo />\n\n        <h3 id=\"tooltip-both\" className=\"post-template__section-subtitle\">Tooltip in both ways</h3>\n        <div className=\"post-template__single-col-wrapper\">\n          <p className=\"post-template__single-col-para\">\n            <CodeBarChartTooltip />\n          </p>\n        </div>\n        \n        <h3 id=\"force-with-react\" className=\"post-template__section-subtitle\">Force graph, the D3 way (useEffect + useRef) way</h3>\n        <CodeForceDemo />\n\n        <h3 id=\"brushing-with-react\" className=\"post-template__section-subtitle\">Brushing, the D3 way (useEffect + useRef) way</h3>\n        <CodeBrushDemo />\n\n      </div>\n  </>\n  )\n};\n\nexport default Section2;","import React from 'react';\nimport { HashLink as Link } from 'react-router-hash-link';\n\nconst TableOfContents = () => {\n  return (\n    <>\n      <div className=\"post-template__table-of-contents\">\n        <div className=\"post-template__title-container\">\n          <div className=\"post-template__section-title-text highlight-dark-background\">Table of Contents</div>\n        </div>\n        <ul className=\"post-template__table-of-contents-main-list\">\n          <li>\n            <Link to=\"#overview-two-ways-combining-d3-react\" className=\"post__toc-link\">Overview of the two ways (DOM handled by React or by D3) of combining D3 and React</Link>\n            <ul>\n              <li><Link to=\"#pros-cons-either-way\" className=\"post__toc-link\">Pros and cons of each way</Link></li>\n              <li><Link to=\"#pros-of-both\" className=\"post__toc-link\">Pros of both, or why use React with D3 in the first place</Link></li>\n            </ul>\n          </li>\n          <li>\n          <Link to=\"#react-d3-code-walkthroughs\" className=\"post__toc-link\">Code Walkthroughs</Link>\n           <ul>\n            <li><Link to=\"#simple-barchart-both\" className=\"post__toc-link\">Simple bar chart in both ways</Link></li>\n            <li><Link to=\"#tooltip-both\" className=\"post__toc-link\">Tooltip in both ways</Link></li>\n            <li><Link to=\"#force-with-react\" className=\"post__toc-link\">Force graph, the D3 way (useEffect + useRef) way</Link></li>\n            <li><Link to=\"#brushing-with-react\" className=\"post__toc-link\">Brushing, the D3 way (useEffect + useRef) way</Link></li>\n            </ul>\n          </li>\n\n        </ul>\n      </div>\n    </>\n  )\n};\n\nexport default TableOfContents;","import React from 'react';\nimport PostTemplate from \"../PostTemplate/PostTemplate\";\nimport { Header, Summary } from \"./Summary/Sumarry\";\nimport Section1 from \"./Section1/Section1\";\nimport Section2 from \"./Section2/Section2\";\nimport TableOfContents from \"./TableOfContent/TableOfContent\";\nimport Arrow from \"../../../../Reusable/Arrow/Arrow\";\n\n\nconst PostReactD3 = () => {\n  return (\n    <PostTemplate id=\"react-d3-tutorial\">\n      <Header />\n      <Summary />\n      <TableOfContents />\n      <Section1 />\n      <Section2 />\n      <Arrow linkto=\"/writing/d3-react-start\"/>\n    </PostTemplate>  \n  )\n};\n\nexport default PostReactD3;","import React from \"react\";\n\n\nconst Introduction = () => {\n  return (\n    <>\n      <div className=\"post-template__title-text large-text\">\n        Using SVG shapes to enhance your D3 visualisations\n      </div>\n      <p className=\"post-template__date\">May 2021</p>\n      <div className=\"post-template__single-col-wrapper\">\n        <p className=\"post-template__single-col-para\">\n\n        <div className=\"spiral-img\"></div>\n        I recently completed \n        a <a href=\"https://lifetimeofwords.netlify.app/\" className=\"post__link\" target=\"_blank\">personal mini-project</a> to\n        learn scrollytelling with GSAP. \n        I chose a fun topic, and since I aimed to make the visualisation itself fun to look at, I decided that instead of using \n        standard shapes like circles and rectangles to represent my datapoints, I should use SVG shapes with some meaning. \n        The project was about measuring the number of words we say in terms of Harry Potter books, so\n        I picked a book-shaped SVG to arrange in a spiral (which itself is supposed to resemble the rings of a \n        tree, reinforcing the ‘book vibes’). \n        (The image above is of one of the \n        iterations - the little squares are actually SVG book shapes 📖). \n        <br/><br/>\n        It was surprisingly easy to achieve that, and I didn’t even need to write any complicated SVG paths myself. \n        All I had to do was <span className=\"post__emph-text\">find an svg shape that I liked on flaticon and import this into my code</span>. \n        This is perfect if you’re not an SVG guru but would like to add some fun, context or personality to your D3 visualisation. \n        You can \n        use <a href=\"https://fontawesome.com/\" className=\"post__link\" target=\"_blank\">Font Awesome</a>, <a href=\"https://www.flaticon.com/\" className=\"post__link\" target=\"_blank\">flaticon</a>, or \n        any other appropriate SVG shapes that you find. Just make sure to give attribution if you’re using free SVG shapes. \n        Let’s have a look at how you can do this with the use of a couple of simple examples.  \n        </p>\n      </div>\n    </>\n  )\n};\n\nexport default Introduction;","import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst cookiePath = `\n      M501.791,236.285c-32.933-11.827-53.189-45.342-50.644-71.807c0-4.351-2.607-8.394-5.903-11.25\n\t\t\tc-3.296-2.842-8.408-4.072-12.686-3.384c-50.186,7.363-96.14-29.352-100.693-80.962c-0.41-4.658-2.959-8.848-6.914-11.353\n\t\t\tc-3.94-2.49-8.848-3.032-13.198-1.406C271.074,71.02,232.637,44.084,217.3,8.986c-2.871-6.563-9.99-10.181-17.007-8.628\n\t\t\tC84.82,26.125,0.001,137.657,0.001,256.002c0,140.61,115.39,256,256,256s256-115.39,256-256\n\t\t\tC511.584,247.068,511.522,239.771,501.791,236.285z M105.251,272.131c-8.284,0-15-6.716-15-15c0-8.286,6.716-15,15-15\n\t\t\ts15,6.714,15,15C120.251,265.415,113.534,272.131,105.251,272.131z M166.001,391.002c-24.814,0-45-20.186-45-45\n\t\t\tc0-24.814,20.186-45,45-45c24.814,0,45,20.186,45,45C211.001,370.816,190.816,391.002,166.001,391.002z M181.001,211.002\n\t\t\tc-16.538,0-30-13.462-30-30c0-16.538,13.462-30,30-30c16.538,0,30,13.462,30,30C211.001,197.54,197.539,211.002,181.001,211.002z\n\t\t\t M301.001,421.002c-16.538,0-30-13.462-30-30c0-16.538,13.462-30,30-30c16.538,0,30,13.462,30,30\n\t\t\tC331.001,407.54,317.539,421.002,301.001,421.002z M316.001,301.002c-24.814,0-45-20.186-45-45c0-24.814,20.186-45,45-45\n\t\t\tc24.814,0,45,20.186,45,45C361.001,280.816,340.816,301.002,316.001,301.002z M405.251,332.131c-8.284,0-15-6.716-15-15\n\t\t\tc0-8.286,6.716-15,15-15s15,6.714,15,15C420.251,325.415,413.534,332.131,405.251,332.131z\n  `\n\nconst CookiesViz = ({ windowWidth }) => {\n\n  //const width = 450;\n  const height = 450; \n  const cookieColours = ['#b7094c', '#892b64', '#5c4d7d', '#2e6f95', '#0091ad']\n\n  const numCookies = 180;\n  const data = Array.from({ length: numCookies }, (_, i) => ({\n    id: i, \n    colour: cookieColours[Math.floor(Math.random() * cookieColours.length)], \n    rotation: Math.floor(Math.random() * 360) // get random rotation between 0 and 360 degrees\n  }))\n\n  const svgRef = useRef();\n\n  useEffect(() => {\n\n    let width;\n    let cookiesRadius; \n    if (windowWidth >= 550) {\n      width = 450;\n      cookiesRadius = 220;\n    } else {\n      width = 300;\n      cookiesRadius = 190;\n    }\n\n  const svg = d3.select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n\n  const cookiesG = svg.selectAll(\"g\").data([0]).join(\"g\")\n    .attr(\"transform\", `translate(${width/2}, ${height/2})`)\n    \n  const cookies  = cookiesG\n    .selectAll(\".cookie-path\")\n    .data(data)\n    .join(\"path\")\n    .classed('cookie-path', true)\n        .attr(\"d\", cookiePath)\n        .attr(\"fill\", d => d.colour)\n        .attr(\"fill-opacity\", 1)\n\n  const simulation = d3.forceSimulation(data)\n    .on(\"tick\", () => {\n      cookies.attr(\"transform\", d => `scale(${0.05})translate(${d.x}, ${d.y})`)\n    })\n    .force(\"collide\", d3.forceCollide().radius(cookiesRadius))\n\n  }, [windowWidth])\n\n  return (\n    <div id=\"cookies-viz-container\">\n      <svg ref={svgRef}></svg>\n    </div>\n  )\n};\n\nexport default CookiesViz;","//import SyntaxHighlighter from 'react-syntax-highlighter';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nconst CodeBlockLight = ({ codeString }) => {\n  return (\n    <SyntaxHighlighter \n      customStyle={{fontSize: '14px', background: '#eee'}}\n      language=\"jsx\"\n      style={prism} \n      showLineNumbers={false} \n      lineProps={{style: {wordBreak: 'break-all', whiteSpace: 'pre-wrap'}}}\n      wrapLines={true} \n    >\n      {codeString}\n    </SyntaxHighlighter>\n  )\n};\n\nexport default CodeBlockLight;\n\n\n\n","import CodeBlockLight from \"../Reusable/CodeBlockLight\";\n\nconst CookiesCode = () => {\n  const codeString = `const cookiePath = \\`M501.791,236.285c-32.933-11.827-53.189-45.342-50.644-71.807c0-4.351-2.607-8.394-5.903-11.25c-3.296-2.842-8.408-4.072-12.686-3.384c-50.186,7.363-96.14-29.352-100.693-80.962c-0.41-4.658-2.959-8.848-6.914-11.353...\\`\n  \nconst svg = d3.select(\"#wrapper\")\n  .attr(\"width\", width)\n  .attr(\"height\", height)\n\n// center the whole viz as we'll add collide force on it\nconst cookiesG = svg.append(\"g\")\n  .attr(\"transform\", \\`translate(\\${width/2}, \\${height/2})\\`)\n  \n// for each cookie join a path with d attr equal to the SVG path we copied\nconst cookies  = cookiesG\n  .selectAll(\".cookie-path\")\n  .data(data)\n  .join(\"path\")\n    .classed('cookie-path', true)\n    .attr(\"d\", cookiePath)\n    .attr(\"fill\", d => d.colour)\n\n// add force to create a shape with the cookies; scale the cookies as needed to fit your desired width/height\nconst simulation = d3.forceSimulation(data)\n  .on(\"tick\", () => {\n    cookies.attr(\"transform\", d => \\`scale(\\${0.05})translate(\\${d.x}, \\${d.y})\\`)\n  })\n  .force(\"collide\", d3.forceCollide().radius(250))`\n\n  return (\n    <CodeBlockLight codeString={codeString}/>\n  );\n};\n\nexport default CookiesCode;","import React from \"react\";\n\n\nconst CookiesText = () => {\n  return (\n    <>\n      The SVG path (omitted here as it takes up a lot of space) for our cookies can be defined in a \n      variable <code class=\"code\">cookiePath</code>, which we call later. If the length of the whole path \n      bothers you, you can put it in a separate file and import it. All we need to do after that\n      is <span className=\"post__highlighted-text\">append a path for each data point and set its d attribute to this path.</span> The\n      only thing that is tricky with this approach is that the path string is usually very complicated and therefore \n      directly editing parts of it to scale your SVG appropriately is hard. \n      \n      I find that using a <span className=\"post__emph-text\">scale transform</span>, playing around with the \n      values until you get the shape to be as big as you need it works well. You'd have to do this again for \n      mobile if you need to shrink your whole graph, but it shouldn't be more than a couple of minutes' worth of manual work. \n\n      Note that here we're using a force which translates the centre of the shapes, so you need to tack \n      the <span className=\"post__emph-text\">scale transform onto the translate </span> (before) \n      as well, otherwise you will end up over-writing the transform attr. \n    </>\n  )\n};\n\nexport default CookiesText;","import CookiesViz from \"./CookiesViz\";\nimport CookiesCode from \"./CookiesCode\";\nimport CookiesText from \"./CookiesText\";\n\n\nconst Cookies = ({ windowWidth }) => {\n  return (\n    <div className=\"post-template__two-col-container\">\n      <div className=\"post-template__two-col-left\">\n        <CookiesCode />\n      </div>\n      <div className=\"post-template__two-col-right\">\n        <CookiesViz windowWidth={windowWidth}/>\n        <br />\n        <CookiesText />\n      </div>\n    </div>\n  );\n};\n\nexport default Cookies;","import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst catPaths = [\n  {\n    path: `m176 488h-8c-75.1 0-136-78.8-136-176 0-56 56-200 56-224 0 13.3-10.7 24-24 24s-24-10.7-24-24c0-26.5 21.5-48 48-48s48 21.5 48 48c0 24-56 168-56 224 0 70.7 39.4 128 88 128z`,\n    fill: \"#464c4f\"\n  },\n  {\n    path: `m424 488 32-288s24-24 24-56-16-56-16-56l-8-64-40 32c-16-8-48-8-48-8s-24 0-48 8l-40-32-8 64s-16 24-16 56 24 56 24 56c-64 0-152 80-152 184s48 104 48 104z`,\n    fill: \"#606669\"\n  },\n  {\n    path: `m392 112h48s0 32-24 32-24-32-24-32z`,\n    fill: \"#f78a25\"\n  }, \n  {\n    path: `m296 112h48s0 32-24 32-24-32-24-32z`,\n    fill: \"#f78a25\"\n  },\n  {\n    path: `m429.3 440-5.3 48h-96l-8-48z`,\n    fill: \"#757c80\"\n  },\n  {\n    path: `m24 312c0 48.8 14.7 94.7 41.5 129.3 27.2 35.3 63.6 54.7 102.5 54.7h256c4.1 0 7.5-3.1 8-7.1l31.7-285.4c6.2-7 24.3-29.9 24.3-59.5 0-29.5-12.5-52.4-16.3-58.7l-7.8-62.3c-.5-4.4-4.5-7.5-8.9-6.9-1.5.2-2.9.8-4 1.7l-36.3 29c-18-6.7-45.4-6.8-46.7-6.8-15.7.3-31.3 2.7-46.3 7.1l-36.7-29.3c-3.5-2.8-8.5-2.2-11.2 1.2-.9 1.2-1.5 2.5-1.7 4l-7.8 62.2c-3.8 6.3-16.3 29.3-16.3 58.7 0 20.8 9 38.3 16.5 49.3-30.6 5.1-63.4 24.6-90.4 54.3-34.9 38.5-54.1 86.9-54.1 136.5 0 9 .4 17.3 1 25-20.5-22.3-33-58.1-33-97 0-32.6 20.1-97.5 36.3-149.7 12.6-40.6 19.7-64.1 19.7-74.3 0-30.9-25.1-56-56-56s-56 25.1-56 56c0 17.7 14.3 32 32 32 3 0 5.9-.4 8.8-1.2-3.3 11.5-7.5 25-11.8 38.8-16.5 53.2-37 119.3-37 154.4zm305.9 136h38.1v32h-33.1zm54.1 32v-32h36.4l-3.6 32zm-198.1-221.6c28.3-31.1 64.3-50.4 94.1-50.4 4.4 0 8-3.6 8-8 0-2.1-.8-4.1-2.3-5.6-.2-.2-21.7-22.2-21.7-50.4 0-29 14.5-51.4 14.7-51.6.7-1 1.1-2.2 1.3-3.4l6.2-49.8 28.8 23c2.1 1.7 5 2.2 7.5 1.3 22.4-7.5 45.2-7.6 45.5-7.6 8.4 0 32.7 1.3 44.4 7.2 2.8 1.4 6.1 1 8.6-.9l28.8-23.1 6.2 49.8c.2 1.2.6 2.4 1.3 3.4.1.2 14.7 22.3 14.7 51.6 0 28.2-21.5 50.1-21.7 50.3-1.3 1.3-2.1 3-2.3 4.8l-25.8 233h-38.2v-152c0-4.4-3.6-8-8-8s-8 3.6-8 8v152h-40c-.2 0-.3 0-.5 0l-23.6-153.2c-.7-4.4-4.8-7.4-9.1-6.7s-7.4 4.8-6.7 9.1l22.6 146.8c-16.6-17.8-39.9-27.9-64.3-28h-30.4c-4.4 0-8 3.6-8 8s3.6 8 8 8h30.4c34.3.1 63.8 24.3 70.6 57.9l1.2 6.1h-142.2c-.1 0-8.9-.4-18.1-10.4-10-10.8-21.9-34.4-21.9-85.6 0-45.6 17.7-90.2 49.9-125.6zm-97.9-178.4c-4.4 0-8 3.6-8 8 0 .7-.1 1.4-.1 2.1-1.2 8.8-9.3 14.9-18 13.7-8-1-13.9-7.8-13.9-15.8 0-22.1 17.9-40 40-40s40 17.9 40 40c0 8.3-9.2 38.1-19 69.6-16.5 53.2-37 119.3-37 154.4 0 51.5 20.5 98.4 52.5 121.4 4.3 20.4 11.1 34.1 18.5 43.4-58.7-15.3-103-83.4-103-164.8 0-32.6 20.1-97.5 36.3-149.7 10.7-34.5 17.4-56.6 19.2-68.8.3-1.8.5-3.7.5-5.6 0-4.3-3.6-7.9-8-7.9z`,\n    fill: \"none\"\n  },\n  {\n    path: `m416 152c25.3 0 32-26.2 32-40 0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8 .1 6.4 1.3 12.8 3.5 18.8 5.1 13.7 15.3 21.2 28.5 21.2zm15-32c-.4 1.8-.9 3.5-1.5 5.2-3.6 9.7-9.5 10.8-13.5 10.8s-9.7-1.1-13.4-10.5c-.7-1.8-1.2-3.6-1.6-5.5z`,\n    fill: \"none\"\n  },\n  {\n    path: `m320 152c25.3 0 32-26.2 32-40 0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8 .1 6.4 1.3 12.8 3.5 18.8 5.1 13.7 15.3 21.2 28.5 21.2zm15-32c-.4 1.8-.9 3.5-1.5 5.2-3.6 9.7-9.5 10.8-13.5 10.8s-9.7-1.1-13.4-10.5c-.7-1.8-1.2-3.6-1.6-5.5z`,\n    fill: \"none\"\n  },\n  {\n    path: `m336.6 179c1.6 4.1 6.3 6.1 10.4 4.5 9.3-3.7 16.2-7.4 21-11.4 4.9 4 11.8 7.7 21 11.4 4.1 1.6 8.8-.4 10.4-4.5s-.4-8.8-4.5-10.4c-15.9-6.4-19.2-10.9-19.8-12.1-2-4-6.8-5.6-10.7-3.6-1.5.8-2.8 2-3.6 3.6-.6 1.2-3.9 5.8-19.8 12.1-4.1 1.6-6.1 6.3-4.4 10.4z`,\n    fill: 'none'\n  }\n]\n\n\nconst numCats = 180;\nconst data = Array.from({ length: numCats }, (_, i) => ({\n  catPaths: catPaths,\n  id: i, \n  rotation: Math.floor(Math.random() * 360) // get random rotation between 0 and 360 degrees\n}))\n\n\nconst CatsViz = ({ windowWidth }) => {\n\n  //const width=450;\n  const height = 450;\n  const catsScale = 0.07;\n  //const catsRadius = 150;\n\n  const svgRef = useRef();\n  \n  useEffect(() => {\n\n    let width;\n    let catsRadius; \n    if (windowWidth >= 550) {\n      width = 480;\n      catsRadius = 150;\n    } else {\n      width = 300;\n      catsRadius = 120;\n    }\n\n    const svg = d3.select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n\n    const catsG = svg.selectAll(\"g\").data([0]).join(\"g\")\n      .attr(\"transform\", `translate(${width/2}, ${height/2})`)\n        \n    const cats  = catsG\n      .selectAll(\".cat-path-g\")\n      .data(data)\n      .join(\"g\")\n        .classed('cat-path-g', true)\n\n    cats.selectAll('.cat-path')\n      .data(catPaths)\n      .join(\"path\")\n        .classed(\"cat-path\", true)\n        .attr(\"d\", d => d.path)\n        .attr(\"fill\", d => d.fill)\n        .attr(\"opacity\", 0.8)\n    \n    const simulation = d3.forceSimulation(data)\n        .on(\"tick\", () => {\n          cats.attr(\"transform\", d => `scale(${catsScale})translate(${d.x}, ${d.y})`)\n        })\n        .force(\"collide\", d3.forceCollide().radius(catsRadius))\n\n  }, [windowWidth])\n\n  return (\n    <div id=\"cats-viz-container\">\n      <svg ref={svgRef}>\n      </svg>\n    </div>\n  )\n};\n\nexport default CatsViz;","import CodeBlockLight from \"../Reusable/CodeBlockLight\";\n\nconst CatsCode = () => {\n  const codeString = `const catPaths = [\n    {\n      path: \\`m176 488h-8c-75.1 0-136-78.8-136-176 0-56 56-200 56-224 0 13.3-10.7 24-24 24s-24-10.7-24-24c0-26.5 21.5-48 48-48s48 21.5 48 48c0 24-56 168-56 224 0 70.7 39.4 128 88 128z\\`,\n      fill: \"#464c4f\"\n    },\n    {\n      path: \\`m424 488 ...\\`,\n      fill: \"#606669\"\n    },\n    {\n      path: \\`m392 112h48s0 32-24 32-24-32-24-32z\\`,\n      fill: \"#f78a25\"\n    }, \n    {\n      path: \\`m296 112h48s0 32-24 32-24-32-24-32z\\`,\n      fill: \"#f78a25\"\n    },\n    {\n      path: \\`m429.3 440-5.3 48h-96l-8-48z\\`,\n      fill: \"#757c80\"\n    },\n    ...\n  ]\n  \nconst svg = d3.select(\"#wrapper\")\n  .attr(\"width\", width)\n  .attr(\"height\", height)\n\nconst catsG = svg.append(\"g\")\n  .attr(\"transform\", \\`translate(\\${width/2}, \\${height/2})\\`)\n    \nconst cats  = catsG\n  .selectAll(\".cat-path-g\")\n  .data(data)\n  .join(\"g\")\n    .classed('cat-path-g', true)\n\ncats.selectAll('.cat-path')\n  .data(d.catPaths)\n  .join(\"path\")\n    .classed(\"cat-path\", true)\n    .attr(\"d\", d => d.path)\n    .attr(\"fill\", d => d.fill)\n    .attr(\"opacity\", 0.8)\n\nconst simulation = d3.forceSimulation(data)\n    .on(\"tick\", () => {\n      cats.attr(\"transform\", d => \\`scale(\\${0.07})translate(\\${d.x}, \\${d.y})\\`)\n    })\n    .force(\"collide\", d3.forceCollide().radius(150))`\n\n  return (\n    <CodeBlockLight codeString={codeString}/>\n  );\n};\n\nexport default CatsCode;","import React from \"react\";\n\n\nconst CatsText = () => {\n  return (\n    <div>\n      <div>\n       Have a look at the complete code here <a href=\"https://codesandbox.io/s/react-bar-chart-demo-bnht8\" target=\"_blank\" className=\"post__link\">[code sandbox]</a>\n      </div>\n      <br />\n      <ul className=\"post__list-in-body\">\n        <li>\n        <span className=\"post__highlighted-text\">Split the SVG path into manageable chunks</span> - Here \n        we only have ~10 constituent paths that make up the cat shape. Note that simple SVGs you find on the internet \n        won't always be made up of paths only, but you can apply the same principle to circles, squares, etc. \n        You first find the parts and isolate them. Then you can put them in a variable in a way that makes sense to you. \n        Here I put them in an array \n        where <span className=\"post__emph-text\">each part (path) is an object with the path's d-attribute and the fill</span>. The \n        benefit of this \n        is that if we wanted to, we could also easily change the colours that make up the cat. Give it red eyes, pink eyes, green eyes, rainbow fur.. \n        </li>\n        <li>\n          <span className=\"post__highlighted-text\">Add one group for each cat</span>. Note that our <code className=\"code\">data</code> variable here is just a simple \n          array of numbers, with length = number of cats. We now have as many groups as we have elements (cats), and are ready to 'fill' the groups with the \n          elements we need to construct each cat - i.e. the <code className=\"code\">catPaths</code>. \n        </li>\n        <li>\n          <span className=\"post__highlighted-text\">Create the shapes for each cat.</span>. The final step is to add all the cat-drawing information that we stored in \n          the <code className=\"code\">catPaths</code> array inside each of the cat groups. We do this by adding a path for each element in the array, setting \n          its d attribute to the corresponding path (<code className=\"code\">attr(\"d\", d =&gt; d.path)</code>), and its fill to the \n          fill (<code className=\"code\">attr(\"fill\", d =&gt; d.fill)</code>). And that's it! We can now position our cats in space in any way we like. \n          Here we have used another force layout for simplicity. \n        </li>\n      </ul>\n    </div>\n  )\n};\n\nexport default CatsText;","import CatsViz from \"./CatsViz\";\nimport CatsCode from \"./CatsCode\";\nimport CatsText from \"./CatsText\";\n\n\nconst Cats = ({ windowWidth }) => {\n  return (\n    <div className=\"post-template__two-col-container\">\n      <div className=\"post-template__two-col-left\">\n        <CatsCode />\n      </div>\n      <div className=\"post-template__two-col-right\">\n        <CatsViz windowWidth={windowWidth}/>\n        <br />\n        <CatsText />\n      </div>\n    </div>\n  );\n};\n\nexport default Cats;","import React from \"react\";\n\nconst Section1Start = () => {\n  return (\n    <div className=\"post-template__single-col-wrapper\">\n\n      <div className=\"post-template__title-container\">\n        <div className=\"post-template__section-title-text\">\n           Simple SVGs\n        </div>\n      </div>\n\n        <p className=\"post-template__single-col-para\">\n          Let's start by looking at a simple example, namely one where the SVG shape you've found or created consists of only one path. \n          We'll take \n          a <a href=\"https://www.flaticon.com/free-icon/cookie_629516\" className=\"post__link\" target=\"_blank\">cookie shape</a> from \n          flaticon. This works the same way no matter where you got the SVG from, but I will describe this particular scenario in detail.\n          <br /><br />\n          <span className=\"post__highlighted-text\">Step 1: Obtain the SVG</span> - The screenshot below is only relevant to flaticon. \n          To download an SVG from flaticon, simply click on the \"svg\" button and then select which type of download you want. \n          <div className=\"cookie-path-img\"></div>\n          <br />\n\n          <span className=\"post__highlighted-text\">Step 2: Open the SVG in a browser</span> - This is the easiest way to get the html code \n          behind the SVG. If you open the SVG in Chrome, you can click on \"View Page Source\"\n          <div className=\"cookie-browser-img\"></div>\n          <br />\n\n          <span className=\"post__highlighted-text\">Step 3: Inspect and port the code for the SVG</span> - Once you've opened the page source, you should \n          see something like this: \n          <div className=\"cookie-source-img\"></div>\n          <br />\n\n          There is a single svg tag wrapping the whole thing, and inside we have many nested group elements. \n          Don't worry about the nesting. This happens when you draw an SVG with a program like Adobe Illustrator and export it. \n          You don't actually need all of them. It seems like we have one single element drawn on the page, which is a very long path element. \n          Thus, we need at most one group element to wrap it. If you're not sure, simply copy the whole code including the svg tag into \n          an html file and play with deleting or modifying bits to see what happens. \n          Here, <span className=\"post__emph-text\">we simply need the path - or rather, just the path's d attribute</span>. We \n          will store it in a variable and use D3 to draw as many cookies as we like, by appending multiple paths, all with\n          this d attribute. \n          <div></div>\n\n          <br/><br/>\n          Let's have a look at the code. \n        </p>\n    </div>\n  )\n};\n\nexport default Section1Start;","import React from \"react\";\n\nconst Section2Start = () => {\n  return (\n    <div className=\"post-template__single-col-wrapper\">\n\n      <div className=\"post-template__title-container\">\n        <div className=\"post-template__section-title-text\">\n           Complex SVGs\n        </div>\n      </div>\n\n        <p className=\"post-template__single-col-para\">\n          If you want to import a more complex SVG shape, i.e. one that is not made of a single path or other basic shape, all you need \n          to do is to identify the parts that make up the shape, split them, store them in a nice way (an array that we can loop over with D3), \n          and finally append them all inside a group so they stay together. \n          If you want to use a very complex SVG shape, with maybe dozens or hundreds of parts, this approach won't scale well, but for any \n          simple shape you'd like to import from somewhere like flaticon, it is actually quite straightforward! \n          <br/><br/>\n          Let's have a look at an example. Since I love cats 🐈‍⬛, I decided to pick a medium-complexity cat path from flaticon, namely \n          this <a href=\"https://www.flaticon.com/free-icon/black-cat_3504465\" className=\"post__link\" target=\"_blank\">beautiful creature</a> by <a className=\"post__link\" target=\"_blank\"  href=\"https://www.flaticon.com/authors/iconixar\" title=\"iconixar\">iconixar</a>. Our\n          approach is the same as before. \n          First, download the SVG, then open in your browser (here Chrome), and click on <span className=\"post__emph-text\">\"View Page Source\"</span>. \n          What you see should look something like this:\n\n          <div className=\"cat-path-img\"></div>\n          \n          This is not very pretty. But if you import it into your JavaScript code and do \n          a <span className=\"post__emph-text\">search in your code editor for \"path\"</span>, you \n          can start isolating the constituent paths that make up the shape. I first put them all on new lines \n          to make sure I don't miss something, as these path string tend to be long and messy. Then all you need to do \n          is <span className=\"post__emph-text\">put these in an array and use them to re-draw the cat </span>in \n          the appropriate scale with D3.\n\n          <br/><br/>\n          Let's have a look at the code. \n        </p>\n    </div>\n  )\n};\n\nexport default Section2Start;","import React from \"react\";\n\nconst Section2End = () => {\n  return (\n    <div className=\"post-template__single-col-wrapper\">\n      <p className=\"post-template__single-col-para\">\n        When I was playing with the scaling and positioning of the cats, I ended up with this wonderful mass of cats 💕.\n        I shall leave you with them for now. \n        <div className=\"cat-mass-img\"></div>\n        <h1 className=\"the-end\">The End 🐾</h1>\n      </p>\n    </div>\n  )\n};\n\nexport default Section2End;","import React, { useState, useLayoutEffect } from 'react';\nimport PostTemplate from \"../PostTemplate/PostTemplate\";\nimport Arrow from \"../../../../Reusable/Arrow/Arrow\";\nimport Introduction from \"./Introduction/Introduction\";\nimport Cookies from \"./Cookies/Cookies\";\nimport Cats from \"./Cats/Cats\";\nimport Section1Start from \"./Sections/Section1Start\";\nimport Section2Start from \"./Sections/Section2Start\";\nimport Section2End from \"./Sections/Section2End\";\nimport \"./SVGShapes.css\";\n\n// For responsive graphs\nfunction useWindowSize() {\n  const [size, setSize] = useState([0, 0]);\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight]);\n    }\n    window.addEventListener('resize', updateSize);\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n  return size;\n}\n\n\nconst PostSVGShapes = () => {\n\n  const [windowWidth, windowHeight] = useWindowSize();\n\n  return (\n    <PostTemplate id=\"svg-shapes\">\n      <Introduction />\n      <Section1Start />\n      <Cookies windowWidth={windowWidth}/>\n      <Section2Start />\n      <Cats windowWidth={windowWidth}/>\n      <Section2End />\n      <Arrow linkto=\"/writing/svg-shapes\"/>\n    </PostTemplate>  \n  )\n};\n\nexport default PostSVGShapes;","import PostReactD3 from \"./1-ReactD3/1-ReactD3\";\nimport PostSVGShapes from \"./2-SVGShapes/2-SVGShapes\";\nimport { Route } from 'react-router-dom'; \n\n\n// This is just where you import all the current posts \n// and manually match the route to each post to the correct post id\n// this is then imported as is into the App.js\nconst AllPosts = () => {\n  return (\n    <>\n      <Route path={`/writing/d3-react-start`} exact\n        render={ props => (\n          <PostReactD3 />\n        )}\n      />\n       <Route path={`/writing/svg-shapes`} exact\n        render={ props => (\n          <PostSVGShapes />\n        )}\n      />\n    </>\n  )\n};\n\nexport default AllPosts;","import React, { useLayoutEffect, useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./Components/About/About\";\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'; \nimport ScrollToTop from \"./Reusable/scrollToTop\";\nimport PortfolioFull from \"./Components/PortfolioFull/PortfolioFull\";\nimport PortfolioPage from \"./Components/PortfolioPage/PortfolioPage\";\nimport FrontPage from \"./Components/FrontPage/FrontPage\";\nimport Writing from \"./Components/Writing/Writing/Writing\";\nimport projectsMetadata from \"./data/projectsMetadata\";\nimport AllPosts from \"./Components/Writing/Posts/AllPosts\";\n\n// listen for resize - you can leave this out of the functional component\n// lets you listen for the width and height dynamically\nfunction useWindowSize() {\n  const [size, setSize] = useState([0, 0]);\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight]);\n    }\n    window.addEventListener('resize', updateSize);\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n  return size;\n}\n\nconst App = () => {\n  // get the width and height of the window \n  const [windowWidth, windowHeight] = useWindowSize();\n\n  return (\n    <>\n    <Router>\n      <ScrollToTop />\n      <Switch>\n        <Route path=\"/\" exact\n          render={ props => (\n              <FrontPage {...props} windowWidth={windowWidth} windowHeight={windowHeight}/>\n           )}\n        />\n        <Route path=\"/about\" exact\n          render={ props => (\n              <About {...props} windowWidth={windowWidth} windowHeight={windowHeight} />\n           )}\n        />  \n        <Route path=\"/writing\" exact\n          render={ props => (\n              <Writing {...props} windowWidth={windowWidth} windowHeight={windowHeight} />\n           )}\n        />  \n        <Route path=\"/portfolio\" exact \n          render={ props => (\n            <PortfolioFull {...props} windowWidth={windowWidth} />\n          )}\n        />    \n        {\n          projectsMetadata.map(project => (\n            <Route path={`/portfolio/${project.id}`} exact\n            render={ props => (\n                <PortfolioPage {...props} project={project} windowWidth={windowWidth} />\n             )}\n          />  \n          ))\n        }\n        <AllPosts/>\n      </Switch>\n    </Router>\n    </>\n  )\n};\n\nexport default App; ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}